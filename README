Welcome to ARTS.

ARTS is free software. Please see the file COPYING for details.

If you use data generated by ARTS in a scientific
publication, then please mention this and cite the most
appropriate of the ARTS publications that are summarized on
http://www.sat.uni-bremen.de/arts/docs.php

For documentation, please see the files in the doc subdirectory.
For building and installation instructions please see the INSTALL file.


BUILDING ARTS
=============

Build Prerequisites:

gcc/g++ (or llvm)
cmake (>=2.8.3)
zlib
netcdf (optional)

To build the documentation you also need:

pdflatex (optional)
doxygen (optional)
graphviz (optional)


USING CMAKE
===========

Here are the steps to use cmake to build arts.

Go into the build directory in the arts directory and run:

cd build
cmake ..
make

If you only want to build the arts executable you can just run 'make arts'
instead of 'make'.

If you have a multi-core processor or multiprocessor machine, don't forget
to use the -j option to speed up the compilation:

make -jX

Where X is the number of parallel build processes.
X=(Number of Cores)+1 gives you usually the fastest compilation time.


BUILD TYPES
===========
To build a release version without assertions or debugging symbols use:

cmake -DCMAKE_BUILD_TYPE=Release ..
make clean
make

To switch back to the debug version use:

cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo ..
make clean
make

This is also the default configuration if you run cmake without
options in an empty build directory.


TESTS
=====

'make check' will run several test cases to ensure that arts is working
properly. Use 'make check-all' to run all available controlfiles, including
computation time-intensive ones. By default, the tests are executed serially.
If you want to run them concurrently, you can use:

cmake -DTEST_JOBS=X ..

X is the number of tests that should be started in parallel.

You can also use the ctest command directly to run the tests:

ctest --output-on-failure -j4

To run specific tests, use the -R option and specify part of the test case
name you want to run:

ctest --output-on-failure -R ppath

This will run all tests that have 'ppath' in their name.

If you don't want to pass --output-on-failure every time, you can set the
CTEST_OUTPUT_ON_FAILURE environment variable.

export CTEST_OUTPUT_ON_FAILURE=1


DISABLING FEATURES
==================

Disable assertions:
cmake -DNO_ASSERT=1 ..

Disable OpenMP:
cmake -DNO_OPENMP=1 ..

Disable NetCDF:
cmake -DNO_NETCDF=1 ..

Disable the built-in documentation server:
cmake -DNO_DOCSERVER=1 ..

Treat warnings as errors:
cmake -DWERROR=1 ..


INTEL COMPILER
==============

If you want to compile with the Intel compiler, start with an empty build
directory and run:

CC=icc CXX=icpc cmake ..


MAC OS X / XCODE
================

If you're on a Mac and have the Apple Xcode development environment installed,
you can generate a project file and use Xcode to build arts:

cmake -G Xcode ..
open ARTS.xcodeproj


EXPERIMENTAL FEATURES (ONLY USE IF YOU KNOW WHAT YOU'RE DOING)
==============================================================

Enable the disort code:

cmake -DENABLE_DISORT=1 ..

Use C++11 and the new libc++ (currently only supported in Xcode builds):

cmake -G Xcode -DWITH_XCODE_LIBCPP ..

