Welcome to ARTS.

ARTS is free software. Please see the file COPYING for details.

If you use data generated by ARTS in a scientific
publication, then please mention this and cite the most
appropriate of the ARTS publications that are summarized on
http://www.sat.uni-bremen.de/arts/docs.php

For documentation, please see the files in the doc subdirectory.
For building and installation instructions please see the INSTALL file.

Prerequisites for building arts:

gcc (or icc)
g++ (or icc)
cmake (>=2.6.3)
zlib
netcdf (optional)

To build the documentation you also need:

pdflatex
doxygen
graphviz (optional)

Here are the steps to use cmake to build arts.

Go into the build directory in the arts directory and run:

cd build
cmake ..
make

If you only want to build the arts executable you can just run 'make arts'
instead of 'make'.

If you have a multicore machine, don't forget to use the -j option to speed up
the compilation:

make -jX

Where X is the number of parallel build processes.
X=(Number of Cores)+1 gives you usually the fastest compilation time.

To build a release version without assertions or debugging symbols use:

cmake -DCMAKE_BUILD_TYPE=Release ..
make clean
make

To switch back to the debug version use:

cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo ..
make clean
make

This is also the default configuration if you run cmake without
options in an empty build directory.

You can also disable certain features:

Disable assertions:
cmake -DNO_ASSERT=1 ..

Disable OpenMP:
cmake -DNO_OPENMP=1 ..

Disable NetCDF:
cmake -DNO_NETCDF=1 ..

Disable warnings being treated as errors:
cmake -DNO_WERROR=1 ..


If you want to compile with the Intel compiler, start with an empty build
directory and run:

CC=icc CXX=icpc cmake ..


If you're on a Mac and have the Apple Xcode development environment installed,
you can generate a project file and use Xcode to build arts:

cmake -G Xcode ..
open ARTS.xcodeproj

