2000-12-04  Patrick Eriksson  <patrick@rss.chalmers.se>

	* arts-0-0-83

	* r_geoid is now made to a workspace variable. Type r_geoidStd{}
        to set it to EARTH_RADIUS.

	* Functions now exist to generate random data with uniform and gaussian
	PDFs. No correlation. VectorRandNormal is an example on workspace
	method. The generation of random data can be checked by rand_test in
	AMI.

	* Made up a format to simply define covariance matrices and made 
	functions to create cov. matrices based on such definition data.
        See sSimple and sFromFile.
	
	* The function z_absHydrostatic gives a vertical grid fulfilling
	hydrostatic eq. The workspace variable h2o_abs must be set.
	

2000-12-01  Axel von_Engeln  <engeln@uni-bremen.de>

	* arts-0-0-82

	* lineshape selection in controlfile implemented

	* lineshape and lineshape_norm are 2 new workspace variables, they
	  contain the index of the selected lineshape and normalization
	  function of the lineshape_data and lineshape_norm_data records.

	* lineshapeDefine and lineshape_per_abs_tagDefine are 2 new
	  workspace methods, they allow the selection of the lineshape and
      	  the lineshape normalization in the controlfile. Currently
	  implemented: shape: Lorentz, Voigt_Kuntz1
	               norm:  no_norm (1), linear (f/f0), quadratic (f/f0)^2
	  Consequently, they both need tag_groups (tags) as input

2000-11-30  Axel von_Engeln  <engeln@uni-bremen.de>

	* arts-0-0-81

	* Test version

2000-11-23  Patrick Eriksson  <patrick@rss.chalmers.se>

	* arts-0-0-80

	* Writing about calibration and conversion to brightness temperature
	in AUG.

2000-11-16  Patrick Eriksson  <patrick@rss.chalmers.se>

	* arts-0-0-79

	* Some very small changes in AUG.

	* Allowed cubic treatment between abscissa points of spectra and 
	sensor characteristics when setting up the H matrix (image sideband 
	spectra still only linear treatment). Before all quantities were 
	assumed to be piecewise linear functions, but now piecewise cubic
 	functions can be assumed which could improve the accuracy in some
	cases (needs to be tested).

	* Please note that the sensor part is not yet validated and testet
 	in detail (however, the values look OK). When I am happy with the
	design of the sensor functions, I will do some comparisons with Skuld
	(but I trust ARTS more) and set up some examples for you.
	

2000-11-13  Patrick Eriksson  <patrick@rss.chalmers.se>

	* arts-0-0-78

	* The writing and reading functions for binary files handle now
	empty data (both ARTS and AMI). (Does this work for ASCII files?)

	* The binary data files are now described in AUG.

	* Put in parts in AUG (just parts pages, no move of chapters was 
	needed). AUG is divided into 3 parts.

2000-11-10  Stefan Buehler  <sbuehler@uni-bremen.de>

	* arts-0-0-77

	* Very small changes to documentation in several places.

	* Sample control file in AUG still needs to be adapted to new
	method and WSV names.
	

2000-11-10  Patrick Eriksson  <patrick@rss.chalmers.se>

	* arts-0-0-76

	* The way to store binary files modified as the prevoius version did
	not work for matrices. The storage scheme will be described in AUG.

	* AMI includes now reading and writing of binary files. The function
	variables for the read and write functions are changed. 

	* I have written and read data back and forth between ARTS and Matlab,
	and between ASCII and binary. Everything seems OK. Even conversion
	between double and float. But there are so many combinations, so
	no guarantees. Tell me if you find any bugs.

	* make_wsv_h.cc produces now also a text file, wsv.txt, with the
	information from workspace.cc. This file is used both for AGU and AMI.
        Feel free to fix an alphabetical order of the variables in wsv.txt.
	This would look better in AUG.
	
	* The file wsv.txt is copied to ami when running init.m. This file
	is then used by read/write_artsvar to determine to type of the 
	varaibles for e.g. consisteny reasosns. The type is also needed when
	reading and writing binary files.

	* Two appendices introduced in AUG, consisting basically of wsv.txt
	and math_test.cc respectively.
	

2000-11-09  Axel von_Engeln  <engeln@uni-bremen.de>

	* arts-0-0-75

	* species_data corrected, a O2-snglt-delta tag number 32005 of the
	JPL catalog was included with the main O2 isotope, even though
	this tag is only present in very small abundance. This tag shows
	very strong absorptions, and it should be checked whether a
	detection from a satellite instrument in possible.

	* example1.arts and other arts controlfiles modified, since
	Patrick renamed some of the workspace methods.

2000-11-09  Axel von_Engeln  <engeln@uni-bremen.de>

	* arts-0-0-74

	* src/m_hmatrix.cc file had still hdf5 included, removed.

2000-11-08  Patrick Eriksson  <patrick@rss.chalmers.se>

	* arts-0-0-73

	* Changed from HDF 5 to HDF 4. More precisly, HDF 4.1r3 is used.

	* String (including arrays) can now be read and written as binary.

	* Default extensions for ASCII files changed. Both numeric and
	string files have now the extension .aa (ARTS ASCII). I did
	not see any strong reason to have different extensions. 

	* The binary files are now displayed using hdp or vshow. See further
	AUG.

2000-11-07  Axel von_Engeln  <engeln@uni-bremen.de>

	* arts-0-0-72

	* JPL catalogs can now be read, they have to be frequency sorted.
	A merged catalog is now included in the arts distribution at:
	data/spectroscopy/jpl00/jpl00.cat, it contains only species know
	to arts. The script merge_and_sort_jpl does the merging and
	sorting, for more info refer to the script.

	* MYTRAN catalogs can now be read, they do not have to be
	frequency sorted. A slightly modified version of the mytran
	catalog of the ESTEC Spectroscopy Study is now included in the
	distribution, it can be found at:
	data/spectroscopy/mytran/mytran98.my2. This catalog is slightly
	modified, since the original included a HO2 species not know to
	arts.

	* comparisons scenarios are now sorted according to the chosen
	scenario:
	aux/iup_forward_comp/H2O_183GHz : contains the water vapor
	                                  comparison at 183GHz
	aux/iup_forward_comp/master_b   : contains some comparisons for
                              	          the master B band
	aux/iup_forward_comp/fascod     : the fascod files in the old iup
	                                  forward format.

	* abundance: Information on the source and calculation of the
	abundance used in arts is located at: aux/abundances/

2000-11-06  Patrick Eriksson  <patrick@rss.chalmers.se>

	* arts-0-0-71

	* Introduced a file format for ARRAYofSTRINGS. The extension is .as.
        See ArrayOfStringWriteAscii for the file format.
	When reading, blanks (white space) is for the moment not allowed.
	Is this accapteble? My answer is no. If anyone can fix this, please
	go ahead.

	* There should now be a full set of functions for the .am format. 
	For example, the function NumericWriteAscii exists now.

	* There is also a full set of functions for numeric binary files using
	HDF 5. But it was probably a mistake of me to pick HDF5 instead of HDF4
	(I just wanted to use the freshest version). This as it turned out 
	that there are only functions in Matlab to handle HDF4. In addition,
	Frank Merino has never told me what version he uses for Odin, but an
	old e-mail indicates that he uses HDF4 (I how now sent an e-mail to 
	confirm this).
	So I am afraid that I have to take one step backward and change the
	core functions to use HDF4.
	

2000-11-02  Patrick Eriksson  <patrick@rss.chalmers.se>

	* arts-0-0-70

	* Included some files to read and write binary files for arrays. 
	Turned off HDF error messages. Improved ARTS error messages.
	(I wanted mainly to commit before leaving for today as I will work at
	home tomorrow. Can read e-mail, but not do cvs commits).
	

2000-11-02  Patrick Eriksson  <patrick@rss.chalmers.se>

	* arts-0-0-69

	* Sorry, but I think that I did the last commit in src. This is mainly
	to fix this error, and to give you the last version of thr ChangeLog
	and TODO. (Some extra in TODO compared to my e-mail).

	* The LOS structure uses now ARRAYofsizet instead of ARRAY<int>

2000-11-02  Patrick Eriksson  <patrick@rss.chalmers.se>

	* arts-0-0-68

	* First version handling binary data files. For the moment there are
	function to read and write binary files for NUMERIC, VECTOR and MATRIX.
	To add functions for other data types (beside strings) should be 
	straightforward, using the general interface functions to HDF.

	* To test the binary-IO, make a control file called test.arts as:
	     VectorNLinSpace (z_abs)     { start = 1.1
                                           stop  = 13.65
                                           n     = 15 }
             VectorWriteBinary (z_abs) {""}
             VectorReadBinary (z_abs)  {""}
             VectorWriteAscii (z_abs) {""}
        The binary files can be displayed by the HDF tool h5dump:
	   h5dump test.z_abs.ab
	If everything is OK, the ASCII file shall have the same content, check
	by
	   more test.z_abs.am
	Note the different extensions.
	Another HDF tool function is h5ls that showes the structure of the data
	(without displaying any data values, in contrast to h5dump).
	
	* To make a distinction between ASCII and binary files, the ASCII
	functions have changed name as:
	  WriteToFile  -> WriteAscii
	  ReadFromFile -> ReadAscii
	The binary functions are denoted correspondingly:
	                  WriteBinary
	                  ReadBinary

	* Cleaned up the IO parts in methods.cc (the functions are now ordered
	after data type). Did the same in m_io.cc. Corrected some function 
	descriptions in methods.cc.

2000-11-01  Stefan Buehler  <sbuehler@uni-bremen.de>

	* arts-0-0-67

	* aii: Added this directory for the ARTS-IDL interface and set up
	Makefile.am. 

	* configure.in: Added aii/Makefile.am here.

	* uguide: Added a new section `Utilities'. This should contain a
	description of the Matlab and IDL interface.

	* uguide/utilities.tex: Started this file as a template for
	Wolfram to use. No contents yet.

	* uguide/Makefile.am: Updated this (added formats.tex and
	utilities.tex). 
	

2000-10-30  Patrick Eriksson  <patrick@rss.chalmers.se>

	* arts-0-0-66

	* AGU has now a new chapter describing data and file formats, and 
	allowed math operations. The chapter is however not finished. Please,
	give comments. The file src/test_math.cc is added and is compilied with
	ARTS. This file should contain examples on all allowed basic math
	operations and is read into AUG. As the file must pass the compiler,
	AUG can only include allowed math operations (at least formaly).

	* Some first test functions for HDF are found in file.cc and 
	m_hmatrix.cc.

	
2000-10-27  Stefan Buehler  <sbuehler@uni-bremen.de>

	* arts-0-0-65

	* file.cc: Included a function open_hdf that illustrates the use
	of HDF. This is one of the HDF examples. Other modifications:
	Added #include <hdf5.h> in top of file

	* Makefile.am: Added a line to include the necessary libraries for
	HDF (quite a few). 

	* If HDF is correctly installed, this should work.

2000-10-25  Oliver Lemke  <oliver@uni-bremen.de>

	* arts-0-0-64

	* configure.in: Disabled documentation generation by default.
	Activate it by invoking configure with the option --enable-docs.

2000-10-23  Oliver Lemke  <oliver@uni-bremen.de>

	* arts-0-0-63

	* doc/uguide/.cvsignore updated.

2000-10-23  Patrick Eriksson  <patrick@rss.chalmers.se>

	* arts-0-0-62

	* ARTS can now produce spectra and WFs including sensor effects and
	data reduction. Some new WF functions and copy functions implemented.

	* H matrices are read as: 
   	    HmatrixReadFromFile(h1){""}
	There are two H matrices to use, h1 and h2.

	* The functions to calculate WFs now only return the matrix for the 
	retrieval identity of interest. A WF function can return the common
 	matrix for several identities if they all have a retrieval grid of the
	same length (the variable k_index is removed).
	The variables kx and kb are introduced (following Rodgers). WF data are
	appended to these variables as
	   kSomeFunction...
	   kxInit{}
	   kxAppend{}
	   kxAppendUsingH(h1){}
	     or
	   kbInit{}
	   kbAppend{}
	   kbAppendUsingH(h1){}
	If kxAppend and kbAppend are used, when the WFs calculations ar ready,
	a H matrix can be applied as
	   MatrixApplyH(kx,h1,kx){}
	This latter approach should be the fastest, while applying H when 
	appending (kxAppendUsingH) saves memory.

	* A second spectrum vector, y0, has been introduced.
	H matrices are applied on spectra as
	   VectorApplyH(y,h1,y){}
	   VectorApplyH(y0,h1,y){}
	Note that it is best to do this last in the control file as some 
	functions need the pencil beam monochromatic spectrum (e.g. absloswfs).
	Y can be copied to y0 as
	   VectorCopy(y0,y){}
	There is also a function to copy matrices (MatrixCopy).

	* The WF for a sensor variable can be obtained as follows. Calcualte
 	h1 for the nominal state, change the variable of interest and calculate
	h2. The WF is then calculated using the kDiffH functions:
	   kDiffHFast{ name    = "Proportional"
                       delta   = 0.01
                       grid    = 0
                       apriori = 0}
	There are two functions, Fast and Small, trying to optimize calculation
	spped and memory usage, respectively. Note that these functions give 
	the WF including the effects of h1 (i.e. kxAppendUsingH should not be
	used).
	There is a function kManual that uses y and y0 to calculate a WF:
	   kManual{ name    = "CBGR"
                    delta   = 2.73
                    grid    = 0
                    apriori = 2.73}
        The WF is calculated as: k = (y-y0)/delta
	As a test, I calculated the WF for cosmic background radiation, but
	there should be better applications for this function.

2000-10-22  Patrick Eriksson  <patrick@rss.chalmers.se>

	* arts-0-0-61

	* I primarily wanted to commit a version to backup my work as I have 
	not made a commit for some time. I am working on the WFs and the
	H matrix stuff. See TODO for my plans. I will give the details at
 	next commit.

	* Some bugs fixed in ami.

2000-10-21  Stefan Buehler  <sbuehler@uni-bremen.de>

	* arts-0-0-60

	* make_md_h.cc: There was a bug in the generic input/output
	WSVs. For example, if a method had a vector as generic input and a
	vector as generic output, the input vector was removed from the
	list of arguments, similar to the case of specif WSV. In the case
	of specific WSVs this is the correct behaviour. However, in the
	case of generic arguments, the two vectors can be different! Fixed
	this.


2000-10-10  Oliver Lemke  <olemke@uni-bremen.de>

	* arts-0-0-59

	* doc/uguide/los1d.tex: Removed .eps endings which broke the
	pdf output. It's IMPORTANT to avoid the endings because they
	are now autodetermined.

2000-10-09  Axel von_Engeln  <engeln@uni-bremen.de>

	* arts-0-0-58

	* lineshape voigt approximation of kuntz implemented, currently
	only one accuracy level, others will follow. this lineshape is
	hard wired in absorption.cc, will be a controlfile input soon.

	* partition function coefficients reorganized, they are now part
	of IsotopeRecord

	* comparison with old forward model performed, using the kuntz
	lineshape. Results are within 1% error in the absorption
	coefficients for the specific calculation H2O_183GHz where only
	this line was considered. Larger errors up to 10 % are found at
	higher altitudes, guess that is an interpolation problem of the
	input vmr profiles. Controlfiles, etc can be found in a new
	directory: arts/aux/iup_forward_comp

	* errors with the documentation, guess that is caused by a
	previous check in, since I did not do anything over there.

2000-10-05  Stefan Buehler  <sbuehler@uni-bremen.de>

	* arts-0-0-57

	* Extended TODO list to have a base for discussion.
	

2000-10-02  Patrick Eriksson  <patrick@rss.chalmers.se>

	* arts-0-0-56

	* Refraction included. All observation geometries are treated.

	* The refraction is included in a totally new way (to my best 
	knowledge). A "prolongation factor" is used that gives the ratio
	between the length of the refracted and the length of a corresponding 
	geometrical LOS between two vertical altitudes. This approach avoids 
	the singularity at tangent points and does not need any integral 
	approximations etc. This results also in fast calculations.
	See further AUG.
	
	* If n is set to 1, the refractive functions and the geometrical ones
	give basically identical results, the difference is on the dm level
	at the top of the atmosphere. This should indicate that the refractive
	functions should give very accurate results.

	* A function to get the refractive index for totally dry air is 
	implemented.
	

2000-09-27  Axel von_Engeln  <engeln@uni-bremen.de>

	* arts-0-0-55

	* Voigt lineshape included, Kuntz approximation to it. 

	* Doppler parameter calculation included.

	* Constants required included.

2000-09-26  Oliver Lemke  <oliver@uni-bremen.de>

	* arts-0-0-54

	* UserGuide: Added pdf output. Divided main.tex in uguide.tex and
	uguide_pdf.tex. Changed the makefile to generate pdf and ps output
	by default. The pdf version requires all figures in pdf-format.
	The conversion from eps to pdf should be done with the epstopdf
	command.

	epstopdf <figure.eps>

	Remember to convert new figures to pdf and do a cvs add.

	* Added default graphics extension in uguide.tex and uguide_pdf.tex
	Now eps and pdf extension in includegraphics commands are no longer
	necessary. LaTeX and PDFTeX will pick the right file automatically.

	* Fixed bug in uguide/Makefile.am: dvips' output on some systems
	is send to lpr by default. Added -f option.
	

2000-09-22  Stefan Buehler  <sbuehler@uni-bremen.de>

	* arts-0-0-53

	* src/Makefile.am: Fixed small bug. (Removed wsv_pointers.h form
	the source list because this file does not exist.) The bug caused
	an error message in make dist.
	

2000-09-22  Axel von_Engeln  <engeln@uni-bremen.de>

	* more TODO stuff, some comments in partion_function_data.cc

	
2000-09-20  Stefan Buehler  <sbuehler@uni-bremen.de>

	* arts-0-0-52

	* main.cc, make_wsv_pointers_cc.cc: Changed the define_wsv_pointer
	to make local workspaces possible. (So far it was only possible to
	have one global workspace. Now multiple workspaces can coexist,
	each with their own pointers arrays.)
	

2000-09-19  Stefan Buehler  <sbuehler@uni-bremen.de>

	* arts-0-0-51

	* absorption.cc: Corrected the internal unit of line intensity
	S. It is now Hz * m^2, consistent with the simple formula
	
	alpha = n * x * S * F,
	
	where alpha is the absorption coefficient (1/m), n is the total
	number density (1/m^3), x is the volume mixing ratio
	(dimensionless), and F is the line shape function (1/Hz). 

	The intensity also already includes the isotope ratio, since this
	is computationally more efficient. 

	* Verified that we still get the same absorption results.

	* Moved some doxygen headers from absorption.h to absorption.cc

2000-09-19  Patrick Eriksson  <patrick@rss.chalmers.se>

	* arts-0-0-50

	* Stefan and I decided that doxygen headers should be placed in .cc
	instead of .h files (when appropiate). This partly to make it easier
 	to put in histories. 

	* Following this decision, I moved doxy headers from atm_funcs.h and
	math_funcs.h to corresponding .cc files.
	

2000-09-18  Patrick Eriksson  <patrick@rss.chalmers.se>

	* arts-0-0-49

	* Doxygenified, and cleaned up existing documentation, for files:
	m_wfs.cc, m_los.cc, atm_funcs.h,cc, math_funcs.h.cc, vecmat.h,cc
	and los.h.

2000-09-14  Patrick Eriksson  <patrick@rss.chalmers.se>

	* arts-0-0-48

	* Removed 1D from function and variable names for LOS, RTE and WF
	parts. We have decided that 1D is default, and 1D should not be 
	included in the names. However, 2D shall be included.

	* The variable klos is renamed to absloswfs (uh, long name, I know).
	This to follow AUG closer. There is also source LOS WFs, but these
	WFs are so far only used by kTEmpNoHydro and are not a workspace 
	variable.
	

2000-09-14  Stefan Buehler  <sbuehler@uni-bremen.de>

	* arts-0-0-47

	* Adapted the doxygen emacs macros for ARTS. Most notably, we want
	to use the /** style to mark comments rather than the /*!
	style. With the /** style the first sentence is taken
	automatically as the short description. I find this
	convenient. Also, this way the comments are less comlicated and
	verbose. 

	* Added documentation about the header format in the Development /
	Conventions section of the user guide. Patrick, can you check this
	please? The emacs macros now should generate exactly the same
	thing as defined there.

	* I have not yet gone through the code making things consistent with
	the new standard, but of course this should be done. First I want
	your ok to this standard. 

	
2000-09-13  Stefan Buehler  <sbuehler@uni-bremen.de>

	* arts-0-0-46

	* Cosmetic changes to doxygen comments all over the place.


2000-09-13  Stefan Buehler  <sbuehler@uni-bremen.de>

	* arts-0-0-45

	* doc/emacs: Added makros for inserting documentation
	headers. There is some html documentation, check out
	doc/index.html. 


2000-09-12  Patrick Eriksson  <patrick@rss.chalmers.se>

	* arts-0-0-44

	* The definition of the source function along the LOS is changed.
	The source function is now defined following the absorption.
	The source functions values are now determined at the LOS points.
	The source functions for a LOS step is calculated as the mean
	of the values at the end points of the step. 
        This change was made to get a similar treatment of the absorption and
	the source function. This is of great help for the analytical WFs.
	See further AUG.

	* Analytical WFs for species, continuum absorption and temperature
	(without hydrostatic eq.) are now ready. See some examples
 	on how to use the function in:
           arts/doc/examples/full.arts
	I have made some quick tests of the WFs. The agreement when disturbing
	the absorption and the temperature with the WFs was excellent. However,
	I have only tested a single upward looking case and there could be 
	bugs. I prefer to wait to do further testing until I am sure that this
	is the final version. 

	* Ground reflections now handled for correctly (hopefully), both for
	1D and 2D cases. Ground reflections also included in the analytical
	WFs.
	
	* AUG (ARTS user guide) is updated and extended to reflect the 
	changes above and several minor errors fixed.

	* WFs are now appended to the total K matrix. Before starting WF 
	calculations, the function kInit shall be called. As a help for
	non-linear inversions and to display results, there are now some
	help variables for the K matrix, giving index, names, a priori value,
	and retrieval grid for the different retrieval identities (e.g. a 
	species profile). However, the k_names cannot be stored as this is
	an ARRAYofstring. This is so far not included in AUG.

	* New workspace variable type: ARRAYofstring

	
2000-08-31  Patrick Eriksson  <patrick@rss.chalmers.se>

	* arts-0-0-43

        * Put in a check command in z2p to handle limb observations
        outside the atmosphere.

	* Changed name on the workspace variables f_abs and view1 to
	f_mono and za_pencil, respectively.
       Za stands for zenith angle. I think this is a better name than 
       viewing angle 1. Zenith angle is a clearer description and I guess
       that there never will be a view2 (it could for example be called orbit
       angle).
       F_abs or f_mono (i.e. monochromatic frequencies) doesn't really matter.
       I just think f_mono fits za_pencil better.

        * AMI functions for reading and writing data renamed. To read
        any file having ARTS data format, use read_datafile. To read
        a ARTS variable, where the last extension is .am, use read_artsvar.
        Corresponding write functions exist. 

        * read_tb removed. Conversion to brightness temperature now treated
        as part of H (see below).

       * A first set of functions to set up the sensor and data reduction
       transfer matrices. These functions are found in ami/hmatrix.
       Some simple tests have been performed but final debugging is not yet 
       done.
       
       Basic facts:
       - A single frequency grid is valid for all zenith angles if no data 
       reduction is performed.
       - With data reduction, all combinations of frequencies and angles
       are allowed.
       - To apply a possible data reduction on covariance matrix for thermal
       noise and weighting functions for baseline ripple terms, the data
       reduction transfer matrix must be known. To set up baseline ripple WFs,
       the final zenith angles and frequencies of the sensor must also be
       known. 

       To handle these facts, there are 6 main variables:
         H         Total transfer matrix. Conversion from monchromatic pencil
                   beam spectra to final, possibly data reduced, measurement
                   vector.
         Hd        Transfer matrix for data reduction. Conversion from sensor
                   output to final measurement vector.
         f_sensor  Centre frequency of the spectrometer channels (assumed to
                   be identical for all angles).
         za_angles Zenith angles observed by the sensor.
         f_y       The frequency of each element of the measurement vector, y
                   (has the same length as y in contrast to f_sensor)
         za_y      The zenith angle of each element of the measurement 
                   vector, y (has the same length as y).

       * Some example file to use these functions will be delivered.

       * To do: the widths of the channels must be included in some way for
       correct calculation of thermal noise.

2000-08-21  Stefan Buehler  <sbuehler@uni-bremen.de>

	* arts-0-0-42

	* lineshapes.cc: Added this file. It contains the definition of
	the available lineshape functions (at the moment only a quick hack
	of Lorentz), as well as the lineshape function lookup data
	(initialized by define_lineshape_data). The lookup data contains
	one record for each lineshape. The record contains name and
	description (as usual), the cutoff frequency (-1 if none), and a
	pointer to the actual function. So, if you have the index of the
	lineshape you want to use, you can call the apropriate
	function. No need for any if or switch statements anywhere.

	* workspace.cc: Added WSV lineshapes, an ARRAY of size_t. This
	will hold one index for each abs_tag. If you have several abs_tags
	for different isotopes or transitions of a species, you may use
	different lineshapes.

	* Missing: A WS method to set lineshapes; use lineshapes in
	absorption calculation.

	
2000-08-16  Stefan Buehler  <sbuehler@uni-bremen.de>

	* arts-0-0-41

	* Had a go at implementing sparse matrices with TNT. This is only
	a quick fix, I don't think it works satisfactorily. In fact, I
	think TNT is crap and we should switch to MTL as soon as
	possible. There is an example method hTest that initializes a
	sparse matrix. It works, but the TNT sparse matrices lack
	basically all functionality. Also I had to fix a number of bugs
	inside TNT to make it work at all!

	* sparse.arts: Added this example in doc/examples. It calls just
	the hTest method.

	* vecmat.cc: Added this file. It contains some stuff that used to
	be in vecmat.h.
	

2000-08-10  Stefan Buehler  <sbuehler@uni-bremen.de>

	* arts-0-0-40

	* Rearranged almost everything. :-)

	* Automatic sources include now also workspace variable groups and
	the workspace itself. This makes adding new variables (and groups)
	easier. See Howto in Uguide how it's done now. There are quite a
	few new files:

	* goups.cc: NEW: Contains the lookup data for WSV groups. Here you can
	add new groups if you want to.

	* wsv_groups_h.cc: NEW: Automatically generates wsv_groups.

	* wsv_groups.h: NEW: Declares the enum type that is used to identify
	WSV groups. Also some other stuff related groups. AUTOMATIC FILE.

	* wsv_pointers_cc.cc: NEW: Automatically generates wsv_pointers.cc.

	* wsv_pointers.cc: NEW: Generates WSV pointers which are
	used by the engine. Now these pointers don't have to be specified
	with the wsv_data anymore, which makes the wsv_data
	nicer. AUTOMATIC FILE.

	* species_data.cc: NEW: Species specific lookup information (for
	example isotope ratios).

	* wsv.h: Now contains also the workspace itself.

	* workspace.h: REMOVED.

	* globals_1.cc: REMOVED.

	* make_wsv_group_h.cc: Renamed to make_wsv_groups_h.cc

	* make_wsv_groups_h.cc: Renamed from make_wsv_group_h.cc


2000-08-08  Axel von_Engeln  <engeln@uni-bremen.de>

	* arts-0-0-39

	* absorption.cc: hitran/mytran tags were wrong

	* absorption.h: several checks that tried to 
			estimate the molecular weight 
			from the isotope name did not
			work properly, commented

	* example1.arts: was empty in last check in


2000-08-08  Axel von_Engeln  <engeln@uni-bremen.de>

	* arts-0-0-38

	* absorption.cc: Included all molecules from JPL/HITRAN.


2000-08-05  Stefan Buehler  <sbuehler@uni-bremen.de>

	* arts-0-0-37

	* This is still an intermediate version. I'm in the process of
	re-designing the automatic generation of header files. Basically,
	the workspace itself should also be generated automatically from
	the information in define_wsv_data.

	* Achieved so far: Wsv group handles (file wsv_group.h) are now
	generated automatically from information in function
	define_wsv_group_names in file groups.cc.


2000-07-30  Stefan Buehler  <sbuehler@uni-bremen.de>

	* arts-0-0-36

	* Come a long way to making a first release. The physics of the
	release will be the same as in the Bredbeck version. In other
	words, still no realistic absorption coefficients. Took a lot of
	fiddling to make the right things go into the release. Now I'm
	almost there, but there is still an overall check lacking.

	* Switched from DOC++ to Doxygen, which is really much much
	better. In particular, the generated HTML document can optionally
	include the source code, in which case it is really good for
	source code browsing.

	* Put all the documentation neatly under `doc'. Also, made a HTML
	page in doc that references all the documentation. IMPORTANT:
	NEVER EDIT THE FILE index.html DIRECTLY. Instead, edit
	index.html.in. 
	
	* Todo: Doxygen is more or less compatible with DOC++, but a lot
	of minor changes still need to be made. In particular, next I will
	fix the \verbatim parts in documentation headers, which seem to
	not come out right.


2000-07-26  Stefan Buehler  <sbuehler@uni-bremen.de>

	* arts-0-0-35

	* Moved user guide to doc/uguide.


2000-06-17  Stefan Buehler  <sbuehler@uni-bremen.de>

	* arts-0-0-34

	* absCalc: Tested this method.

	* full.arts: I wanted to preserve Patricks example, so this one is a
	combination of my absorption and your example h2o.arts.
	I have taken the midlatitude-winter atmospheric scenario of
	data/atmosphere/fascod, since it is the only one for which
	Patrick's p_grid and k_grid are inside the pressure range. Also,
	k_grid had to be slightly changed. The spectrum y looks
	reasonable, but the k matrix looks strange (ragged).


2000-06-16  Stefan Buehler  <sbuehler@uni-bremen.de>

	* arts-0-0-33

	* Added section `The ARTS concept' to user guide.

	* Filled in section development/organization
	
	* Added prototype for method absCalc{} which will calculate
	absorption in a rather simplified way for demonstration.

	* example1.arts: Made this file a lot nicer with comments and
	such. 

	* Added GNU license everywhere in arts and arts/src.


2000-06-15  Stefan Buehler  <sbuehler@uni-bremen.de>

	* arts-0-0-32

	* Now compilation without optimization is the default. In fact,
	for now it is impossible to turn optiomization on. :-)

	* Merged notes.txt with the uguide. Removed notes.txt.

	* doc/examples: Added this directory. Inside is my example file
	example1.arts. Output files of this example are listed in
	.cvsignore. 

	* doc/examples/arts: A script that calls the built arts
	executable. 

	* data/spectrocopy/hitran96: Added this directory. It contains a
	section of the Hitran catalogue up to about 900 GHz. Also contains
	a smaller file with just H2O lines.
	

2000-06-15  Patrick Eriksson  <patrick@rss.chalmers.se>

	* arts-0-0-31

	* A first version of species WFs is ready. All observation geometries
 	are handled, but ground intersections are not yet considered. 
        The function cover so far only the case when all the absorption is 
	created by a single species. The WFs are returned normalised to the 
	a priori profile. Other units will be implemented when the absorption
	part is ready.
	Some first tests have been performed but no extensive bug checks have
	been done. So be aware.

	* New workspace variables: k_grid, k
	  New methods: kSpecies1d

	* My AUG parts are also updated and do now match the source code (for 
	the implemented parts). 

	* The RTE and BL core iteration is now found in seperate functions. 
	This should faciliate the future use, for single scattering etc.

	* INTERPP now also in matrix-row version.


2000-06-12  Stefan Buehler  <sbuehler@uni-bremen.de>

	* arts-0-0-30
	
	* lines_per_tgCreateFromLines: This method splits up the line list
	into sub-lists for each tag group. This is the place where the tag
	groups are applied to divide the line list!

	* lines_per_tg (type ARRAYofARRAYofLineRecord ): This stores the
	line lists for the individual tag groups. This will be input the
	absortion coefficient calculation. 


2000-06-11  Stefan Buehler  <sbuehler@uni-bremen.de>

	* arts-0-0-29
	
	* Input Atmosphere stuff is 1D (so is RTE). Only the absorption
	coefficient calculation itself is already 2D, since this is
	practically no extra effort.

	Reason for 1D input: It is not enough to just read a list of
	profiles. They could be on different horizontal grids. In fact one
	must somehow specify the horizontal coordinate to do proper horizontal
	interpolation. 

	* Added row and col functions which extract a row (or column) from
	a matrix. The output can be a vector or a matrix. For a matrix the
	first and the last row (or column) to extract have to be
	specified. I was really missing this, many times you have a
	function that can act on a vector, so you want to apply it to a
	row or column of your matrix.

	* Atm2dFromRaw1D: This method interpolates the raw atmospheric
	inputs onto the absorption grid.

	
2000-06-10  Stefan Buehler  <sbuehler@uni-bremen.de>

	* arts-0-0-28

	* The new compiler (g++-2.95.2) is more fuzzy about redeclaration
  	of variables. Therefore all global variables had to be moved to
	two separate files.

	* Rearranged workspace and methods data, so that workspace.h,
	workspace.cc, and methods.cc contain only the data itself.
	
	* globals_1.cc: Global variables that do NOT depend on wsv.h.

        * globals_2.cc: Global variables that DO depend on wsv.h.

	* workspace_aux.cc: Auxiliary stuff that used to be in workspace.cc.

        * methods_aux.cc: Auxiliary stuff that used to be in methods.cc.

	* los.h: Declaration of the Los data type. Moved there from
	workspace.h 

	* wsv_groups.h: Everything related to WSV groups.

	* wsv_aux.h: Auxiliary stuff for the workspace.
	
	* I do not get any warning messages. Patrick, do you still get
	them? 
	

2000-06-09  Patrick Eriksson  <patrick@rss.chalmers.se>

	* arts-0-0-27

	* Cleaned up the LOS functions and the corresponding parts of the
	user guide. Included functions to calculate total atmospheric 
	transmisioion.

	* The compilation gives some warning messages.
	
	* The LOS starts now always in space. The case with the blackbody
 	ground is not considered anymore. This made the functions simpler.

	* The LOS and RTE functions renamed (sorry about that). 
	Functions giving spectra are now called yRte, and functions giving
	transmisiion yBl (Beer-Lambert). Made some functions for special cases
	where less workspace variables must be set. Some functions name:
	- los1d
	- los1dNoRefraction
	- los1dUpward
	- source1d
	- trans1d
	- yRte
	- yRteNoGround
	- yBl
	- yBlNoGround                          

	* The function startup added to AMI.


2000-06-01  Stefan Buehler  <sbuehler@uni-bremen.de>

	* arts-0-0-26

	* Added workspace variables: 
	n_profiles, 
	ptz, 
	raw_vmr_profiles,
	t_and_all_vmrs 

	* raw_vmr_profilesReadFromScenario: Added this method. It does
	just what the name says.
	
	* Changed standart data file extension from .a to .am (you can
	read this as `arts matrix' or as `array of matrix', as you
	like). The single a seems to be already in use by other programs. 

	* Removed the WriteToNamedFile and ReadFromNamedFile methods. Now,
	there are only ReadFromFile and WriteToFile methods, which take a
	filename as a keyword parameter. You can give an empty string as
	the name, then the default name is chosen. It was simply too
	nerve-wracking to have to duplicate each and every IO function for
	these two cases.


2000-05-30  Stefan Buehler  <sbuehler@uni-bremen.de>

	* arts-0-0-25

	* What was version 24?

	* parser.cc: Fixed bug in SourceText::AdvanceChar(), which lead to
	the last line of the controlfile not being correctly
	parsed. Correctly treating the end of the file seems to be the
	biggest problem for the parser! Hope this works correctly now.

	* tag_groupsDefine: Added this workspace method. It sets the
	contents of the workspace variable tag_groups, which contains the
	available tag groups. A tag group can consist of several tag
	definitions, but contrary to the Bredbeck definition, they must
	all relate to the same species. The reason for this is that there
	will be one VMR profile associated with each tag group. 

	The drawback is that there must be a tag group for each molecule
	you want to calculate absorption for. But I don't see another
	solution, somewhere it has to be defined which input data to
	use. I think one tag group = one input profile is the cleanest
	solution. 
	
	* Discovered a nasty problem with strstream. Essentially, it does
	not work as I thought it did. Replaced by the future standard
	stringstream. Since stringstream is not yet part of EGCS, I have
	added the necessary files to the ARTS source code. The files are:

	sstream.h (contains also the contents of the original file sstream.cc)
	iotraits.h

	I got these files off the web:
	ftp://ftp.fmi.uni-konstanz.de/pub/algo/personal/kuehl/sstream-egcs.tgz. 
	They are written by Dietmar Kuehl.

	* Replaced strstream by stringstream everywhere. Pure stringstream
	also seems to work not so well, so I always use either
	ostringstream or istringstream.
	

2000-05-23  Patrick Eriksson  <patrick@rss.chalmers.se>

	* arts-0-0-23

	* Included present versions of the ARTS Matlab interface (AMI) and
	the user guide to the CVS distribution.

	* Updated AMI to handle new data format
	Present functionality of AMI
	Read and write files basic data files
	Call ARTS from Matlab
	Setting the MAtlab search path

	* Please note that the user guide is not up to data and does
	not match the present version of ARTS


2000-05-22  Stefan Buehler  <sbuehler@uni-bremen.de>

	* arts-0-0-22

	* ARTS can now read HITRAN catalogue files!

	* Methods: linesReadFromHitran, linesWriteToNamedFile
	These methods are rather preliminary, because how they should act
	eventually depends on the rest of the absorption module. Anyway,
	I've tried to rather cleanly implement the capability to
	understand HITRAN in the utility function 

	LineRecord::ReadFromHitranStream(istream& is)

	Yes, this is a member function of LineRecord, the data structure
	that stores spectro data for a single line. In the future, similar
	member functions can be added to read from JPL (setting widths to
	default values) and of course eventually from the native ARTS
	format. 

	Of course, the program does not depend internally on any
	particular catalogue at all. In particular not on HITRAN. Rather,
	during the read-in, the HITRAN data is right away converted to the
	ARTS internal format. 

	For now, this stuff seems to work fine. Ah yes, the line data is
	according to the recommendations given in the Bredbeck book. I've
	tried to document all formats and units as best as I can in the
	code directly.


2000-05-20  Stefan Buehler  <sbuehler@uni-bremen.de>

	* arts-0-0-21

	* Added species lookup data. I filled in the data only for H2O and
	O3, because I'm too lazy right now. 

	Molecular masses: From looking at the table in forward_4_96,
	glob_def.c, the relative difference between the actual mass and
	the mass simply estimated from the Atom number is only 0.001. This
	seems not worth the trouble. Anyway, the field for the mass is
	there. Should anybody feel like adding the true numbers, just go
	ahead.


2000-05-15  Stefan Buehler  <sbuehler@uni-bremen.de>

	* math_funcs.cc: Bug fix in
	void to_vector(VECTOR& x, const MATRIX& W)


2000-05-12  Stefan Buehler  <sbuehler@uni-bremen.de>

	* arts-0-0-20

	* Added implementation of --workspacevariables (-w) command line
	option. 

	* Put the handling of the more complex command line options
	(-r,-d,-m,-w) in subroutines.

	* Added command line option --groups (-g) which simply lists all
	wsv groups.

	* This means the command line options are complete for now.


2000-05-11  Stefan Buehler  <sbuehler@uni-bremen.de>

	* arts-0-0-19

	* Added the implementation of the --methods (-m) dommand line
	option. Seems to work beautifully!


2000-05-08  Stefan Buehler  <sbuehler@uni-bremen.de>

	* arts-0-0-18

	* Added the implementation of the --describe (-d) command line
	option. 

	
2000-04-30  Stefan Buehler  <sbuehler@uni-bremen.de>

	* arts-0-0-17

	* Added the command line parameter --reporting (-r).
	This should be a two digit integer. The first digit specifies
      	the output level for stdout (stderr for error messages), the
      	second digit the output level for the report file. The levels
      	can reach from 0 (show only error messages) to 3 (show
      	everything). Example:
  
      	03 = only errors to the screen, everything to the file.

	* Added some other cool command line parameters. However,
	currently they only produce a message that the implementation is
	still lacking. These are:

	string methods:    
	If this is given the argument `all', it simply prints a list of
 	all methods. If it is given the name of a variable, it prints all
 	methods that produce this variable as output.
        
	string workspacevariables:
       	If this is given the argument `all', it simply prints a list of
 	all workspace variables. If it is given the name of a method, it
 	prints all variables needed by that method.

        string describe:
  	Print the description string of the given workspace variable or
 	method.

	
2000-04-29  Stefan Buehler  <sbuehler@uni-bremen.de>

	* arts-0-0-16

	* vecmat.h: Small changes to the text defining the allowed
	matrix/vector operations. (In one instance it said `MATRIX' where
	it probably should say `VECTOR'.)

	* file.h: Fixed a strange bug: When the last line of a textfile
	was not terminated by a newline character, it was read twice by
	read_text_from_stream. Learned the following: If the end of stream 
	s is reached, first s.eof() becomes true, but s is still
	false. Only if one tries to read past the end does s become true. 

	* Implemented ARRAYofMATRIX and ARRAYofVECTOR as standard
	types. In particular, these are also now types of workspace
	variables. Implemented IO functions for these:

	Output:
	ArrayOfMatrixWriteToFile,
  	ArrayOfMatrixWriteToNamedFile,
  	ArrayOfVectorWriteToFile,
  	ArrayOfVectorWriteToNamedFile,

	Input:
	ArrayOfMatrixReadFromFile,
  	ArrayOfVectorReadFromFile,

	The file format is now always that of ArrayOfMatrix. All other
	variables are treated as special cases with apropriate dimensions
	set to 1. Only a single real output and only a single real input
	function are used (that for ArrayOfMatrix). This means that other
	types have to be converted to this type before writing or after
	reading. This is not terribly efficient. Should there be
	performance or memory problems later on, then we have to write
	dedicated IO functions. The amount of code is probably about the
	same, just to me the real IO seemed more difficult than the
	conversions, hence I did it the way I did it.
		
	
2000-04-12  Patrick Eriksson  <patrick@rss.chalmers.se>

	* arts-0-0-15

	* This version can produce spectra (without refraction).
	  General functions to determine the LOS, to get transmission and
	  the source function along the LOS and to solving the RTE along
	  LOS are ready.
 	
	* A first list on vector and matrix functionality written. It is
	  found in vecmat.h. Some functions changed and added to match
	  the stated functionality.

	* Some workspace variables added and some renamed. The variables 
	  are now
	    VECTOR     p_abs;
	    VECTOR     t_abs;
	    VECTOR     z_abs;
	    VECTOR     f_abs;
	    MATRIX     abs;
	    VECTOR     view1;
	    Numeric    z_plat;
	    Numeric    l_step;
	    int        refr;
	    Numeric    l_step_refr;
	    VECTOR     refr_index;
	    Numeric    z_ground;
	    Numeric    t_ground;
	    VECTOR     e_ground;
	    Los        los; 
	    MATARRAY   source;
	    MATARRAY   trans;
	    VECTOR     y_space;
	    VECTOR     y;

	* Example on new method calls:
	    y_spaceStd{1}
            y_spacePlanck{300}
            losBasic{}
            sourceBasic{}
            transBasic{}
            yGeneral{}


2000-04-10  Stefan Buehler  <sbuehler@uni-bremen.de>

	* arts-0-0-14

	* token.cc: Fixed small bug in definition of TokValTypeName.

	* reconf: Remove links before trying to re-configure.
	
	
	* arts-0-0-13

	* Renamed token types to 
	enum TokValType { string_t,    int_t,    Numeric_t,
	                  ARRAY_string_t, ARRAY_int_t, ARRAY_Numeric_t,
                          undefined_t };
	This is now consistent with the token type names in token.cc.

	* Removed Integer type, since it is no longer necessary.

	* notes.txt: Updated with respect to global constants.

	* notes.txt: Added howto about switching off optimization.

	* Everywhere: Changed const extern to extern const. This is just
	for nicety, the two are the same thing.

	* vecmat.h: Moved Patricks vector/scalar operations here from
	tnt/vec.h.

	* Compiling without optimization is really much much faster. I
	wish I had realized this before!
	

2000-04-06  Patrick Eriksson  <patrick@rss.chalmers.se>

	* arts-0-0-12

        * Some methods are commented out due to compilation problems

	* Changed definitions of constant to e.g.
    	    extern const Numeric EARTH_RADIUS   = 6.378e6;
	To use the constant, type
	    extern const Numeric EARTH_RADIUS;
	I had to add extern also at the definition to get it to work.
	Stefan, is the text in notes.txt really correct?

	* Added doc++ text and file header to constants.cc and math_funcs.cc
	
	* Workspace types added (as temporary solution):
	    Integer
	
	* Workspace variables added (or renamed):
	    VECTOR  z_abs;
	    VECTOR  view1;
	    Numeric z_plat;
	    Numeric l_step;
	    Integer refr;
	    Numeric l_step_refr;
	    Integer cbgr;
	    Numeric z_ground;
	    Numeric t_ground;
	    VECTOR  e_ground;
	    Los     los; 

	* Methods added:
	    IntSet
	    VectorSet
	    VectorLinSpace
	    VectorNLinSpace
	    VectorNLogSpace
	    losGeneral

	* Files included:
	    m_los.cc 
	    atm_funcs.cc
	    atm_funcs.h
	  

2000-04-05  Stefan Buehler  <sbuehler@uni-bremen.de>

	* arts-0-0-11

	* Fixed the bugs reported by Patrick. This is not a running
	version of the program, because the file src/m_los.cc is missing!

	* parser.cc: Fixed bugs 1:

	The case with the optionally missing keyword for one parameter
	methods was not handled correctly. Now the current character is
	used to recognize this case. THIS MEANS THAT KEYWORD NAMES
	STARTING WITH A NUMBER WILL BREAK THE PARSER! I don't know a
	better solution without look-ahead.

	* parser.cc: Fixed bugs 2:

	The last method was executed twice in some cases, due to incorrect
	flagging of Eof in function SourceText::AdvanceChar.


2000-04-04  Patrick Eriksson  <patrick@rss.chalmers.se>

	* arts-0.0.10

	* Set the ground to include los1d. Included the file m_los.cc.
	  Introduced the workspace variables plat_z and view1 for test
	  purposes. There will be more variables connected to los.
	  Some bugs mailed to Stefan.


2000-04-04  Stefan Buehler  <sbuehler@uni-bremen.de>

	* arts-0.0.9

	* Added method losTest just to see if we can access los. This does
	not initialize los, just change the value. For a real method, this
	would be very bad style, it should re-set los completely, unless
	los is also specified as INPUT variable in methods.cc. 
	

	* arts-0.0.8

	* Added workspace variable group Los and workspace variable los on
	Patrick's request. The declaration of Los is now in file
	workspace.h, but it could be moved somewhere else in the future.

	
	* arts-0.0.7

	* parser.cc:
	In void read_name(string& name, SourceText& text): Changed isalpha
	to isalnum, so that names may now also include numbers. 

	This was a request of Patrick. I don't remember if I had a good
	reason to allow only alphabetic characters and underscores. Let's
	just see if we get any problems with this.


	* arts-0.0.6

	* Quickly implemented NumericSet for Patrick

	* workspace.h:
	- Added Numeric_ in WsvGroup 
	- Changed N_WSV_GROUPS to 3
	- Added   Numeric dummy to class WorkSpace
	- Added
	  virtual operator Numeric*() { safety(); return NULL; };
	  in class WsvP

	* notes.txt
	!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	The last point above was missing in notes.txt. I have added it
	now. Sorry for that.  
	!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

	* workspace.cc:
	- Added: wsv_group_names.push_back("Numeric");
	- Added:
 	  {
	  static WsvPointer<Numeric> p(&workspace.dummy);
	  wsv_data.push_back
	  (WsvRecord
	  ("dummy",
	  "This is just to test Numeric WSVs.",
	  Numeric_,
	  &p));
	  }

	* methods.cc:
	- Added:
	  md_data.push_back
	  ( MdRecord
	  ( NAME("NumericSet"),
	  DESCRIPTION("Sets a workspace variable of type Numeric to a value."),
	  OUTPUT(),
	  INPUT(),
	  GOUTPUT(Numeric_),
	  GINPUT(),
	  KEYWORDS("value"),
	  TYPES(num_)));

	* m_io.cc:
	- Added the implementation of NumericSet


2000-03-30  Stefan Buehler  <sbuehler@uni-bremen.de>

	* arts-0.0.5

	* ARTS has now the following methods:
        AllAbsExample
	VectorWriteToFile
	MatrixWriteToFile
	VectorWriteToNamedFile
	MatrixWriteToNamedFile
	VectorReadFromFile
	MatrixReadFromFile

	which all do the obvious. Parsing and executing of methods seems
	to work, but yet has to be tested for a wider variety of
	methods. Also, the executor already checks if all input workspace
	data is present, before it executes a method.

	* Added some more HowTos in file src/notes.txt
	

2000-03-29  Stefan Buehler  <sbuehler@uni-bremen.de>

	* arts-0.0.4
	* Now we can parse and execute specific and generic
  	methods. However, I want to re-structure the method lookup data
	(add explicit fields for generic I/O, so that a method can have
	both generic and specific I/O). So this commit is mainly to save
	the state of the work before I start with this complicated task.


2000-03-24  Stefan Buehler  <sbuehler@uni-bremen.de>

	* arts-0.0.3.
	* Arts can now parse specific (i.e., not generic) methods. There
	so far is only a single method, AllAbsExample, which sets the
	absorption parameters.

	
	* arts-0.0.2.
	* make_md_h.cc: Added.
	* math_funcs.h: Added.
	* math_funcs.cc: Added. 
	* absorption.cc: Added. 


2000-03-14  Stefan Buehler  <sbuehler@uni-bremen.de>

	* This file contains  SAB 14.03.2000.

	* arts-0.0.1.
	* .cvsignore files added everywhere.
	* Started this file, the Arts history. ALWAYS add a note to this
	file, no matter how small your change. Also, always update the
	running version number. Newest change log entries first!
	  
	You can very easily add an entry with emacs by typing either M-x
	add-change-log-entry or C-x 4 a.
	  
	Remark about version numbers: Arts has a 3 digit version number,
	like for example Arts 1.2.3. For user releases the third digit is
	zero.  The first two digits are set in configure.in. Update these
	only when you cut a user release. In that case you also have to
	set the third digit to zero.  The third digit is set in
	src/version.cc. Always update this, no matter how small your
	change!
