#DEFINITIONS:  -*-sh-*-

# ARTS setup file for fast HIRS simulations.
#
# Use this if you want to do fast HIRS simulations.  It should be a
# good approximation of the exact simulations.
#
# This expects a number of workspace variables to exist and to be set:
# 
# f_backend_file                (String) Nominal channel frequencies. 
# backend_channel_response_file (String) Instrument response functions.
# channels                      (ArrayOfIndex) Which channels you want.
# hitran_file                   (String) Name of HITRAN catalogue file.


Arts2 {


# 1. General
#-----------

output_file_formatSetZippedAscii

# AMSU uses Planck brightness temperatures
# ---
StringSet( y_unit, "PlanckBT" )
StringSet( jacobian_unit, "RJBT" )


# 2. Spectroscopy
#----------------

# We take a smaller cutoff, since the line-by-line calculation is 
# only for O3, where only the local lines matter.
# Could be speed-optimized further by selecting only the relevant 
# lines from the line list.
ArrayOfLineshapeSpecCreate( abs_lineshapeDefine )

#abs_lineshapeDefine( abs_lineshapeDefine, 
#                     "Voigt_Kuntz6", 
#                     "VVH", 
#                     750e9 )

SpeciesSet( abs_species, [ "H2O, H2O-SelfContCKDMT100, H2O-ForeignContCKDMT100", 
	                   "O3", 
                           "CO2, CO2-CKDMT100", 
                           "N2O", 
                           "CO", 
                           "CH4", 
                           "O2, O2-CIAfunCKDMT100", 
                           "N2, N2-CIAfunCKDMT100, N2-CIArotCKDMT100" ] )

abs_lineshape_per_tgDefine( abs_lineshape, 
                            abs_species,
                            ["Voigt_Kuntz6", "Voigt_Kuntz6", "Voigt_Kuntz6", "Voigt_Kuntz6", 
			     "Voigt_Kuntz6", "Voigt_Kuntz6", "Voigt_Kuntz6", "Voigt_Kuntz6"],
                            ["VVH", "VVH", "VVH", "VVH", "VVH", "VVH", "VVH", "VVH"],
                            [750e9, 750e7, 750e7, 750e7, 750e7, 750e7, 750e7, 750e7] )

# Read HITRAN catalog:
abs_linesReadFromHitran2004( abs_lines,
                             hitran_file,
                             2.0022234e+12,
                             7.9855733e+14 )

abs_lines_per_speciesCreateFromLines

# WARNING: If you redifine abs_species, and want to do a line-by-line
# calculation, you also have to call
# abs_lines_per_speciesCreateFromLines again.


# 3. Sensor:
#-----------

# Definition of sensor position and LOS
# ---
# FIXME: sensor_los probably has to be adjusted.
ReadXML( sensor_los, "hirs.sensor_los.xml" )
nrowsGet( nrows, sensor_los )
ncolsGet( ncols, sensor_los )
MatrixSetConstant( sensor_pos, nrows, ncols, 850e3 )
sensor_posAddRgeoid

# Instead of the rest of the sensor setup, we just read the optimize
# frequency grid and weights.

ReadXML( f_grid, "FIXME" )
ReadXML( pseudo_k_weights, "FIXME" )


# Spectrometer:
#
VectorCreate(f_backend_temp)
ReadXML( f_backend_temp, f_backend_file )

# Select the desired channels:
#
Select(f_backend, f_backend_temp, channels)
# FIXME: Still to do: Kick out those frequencies that are not used by
# the selected channels. This has to be done for f_grid and pseudo_k_weights.


abs_lines_per_speciesCompact

# If there was a method to convert abs_lines_per_species back to
# abs_lines, then we could do that, and save that file. The only
# problem is, though, that the lines to include are not exactly the same
# for all the different versions of the HIRS sensor. Thus, one would
# also have to perform a merge of all the different resulting line
# lists. :-(


# Construct sensor response from all these inputs:
#
sensor_responseInit
sensor_responseBackend
# FIXME: Now modify sensor_response, based on pseudo_k_weights.


# End of sensor response setup


}
