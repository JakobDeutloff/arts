#DEFINITIONS:  -*-sh-*-

# ARTS setup file for HIRS reference simulations.
#
# Use this if you want to do exact calculations, for example to
# validate fast calculations.  
#
# This expects a number of workspace variables to exist and to be set:
# 
# satellite   (String) 	     The name of the satellite. Is
#                      	     used internally to construct
#                      	     file names of the instrument
#                      	     description files
#                      	     f_backend_file and
#                      	     backend_channel_response_file. 
# channels    (ArrayOfIndex) Which channels you want.
# views       (ArrayOfIndex) Which views you want.
# hitran_file (String)       Name of HITRAN catalogue file.
# f_grid_spacing (Numeric)   Frequency grid spacing.

# Concerning the frequency grid spacing:
# I tested the spacing on HIRS channel 12. With 5e8 Hz spacing I got
# an RMS error of 0.01 K and a maximum error of 0.02 K. This should be
# good enough. We will have 8402 frequencies for Channel 12. 
# A coarser spacing of 5e9 Hz gave an RMS error of 0.03 and a maximum
# error 0.05.
# All these number are against a reference calculation with 5e7 Hz
# spacing, which was shown to give nearly identical result to a somewhat
# coarser calculation.
# Recommendation:
# reference calculation: f_grid_spacing 5e8
# faster calculations:   f_grid_spacing 5e9


Arts2 {


# 1. General
#-----------

output_file_formatSetZippedAscii

# AMSU uses Planck brightness temperatures
# ---
StringSet( y_unit, "PlanckBT" )
StringSet( jacobian_unit, "RJBT" )


# 2. Spectroscopy
#----------------

SpeciesSet( abs_species, [ "H2O, H2O-SelfContCKDMT100, H2O-ForeignContCKDMT100", 
	                   "O3", 
                           "CO2, CO2-CKDMT100", 
                           "N2O", 
                           "CO", 
                           "CH4", 
                           "O2, O2-CIAfunCKDMT100", 
                           "N2, N2-CIAfunCKDMT100, N2-CIArotCKDMT100" ] )

# abs_lineshape_per_tgDefine( abs_lineshape, 
#                             abs_species,
#                             ["Voigt_Kuntz6", "Voigt_Kuntz6", "Voigt_Kuntz6", "Voigt_Kuntz6", 
# 			     "Voigt_Kuntz6", "Voigt_Kuntz6", "Voigt_Kuntz6", "Voigt_Kuntz6"],
#                             ["VVH", "VVH", "VVH", "VVH", "VVH", "VVH", "VVH", "VVH"],
#                             [750e9, 750e9, 750e9, 750e9, 750e9, 750e9, 750e9, 750e9] )
abs_lineshapeDefine( abs_lineshape, "Voigt_Kuntz6", "VVH", 750e9 )

# Read HITRAN catalog:
abs_linesReadFromHitran2004( abs_lines,
                             hitran_file,
                             2.0022234e+12,
                             7.9855733e+14 )

abs_lines_per_speciesCreateFromLines


# WARNING: If you redifine abs_species, and want to do a line-by-line
# calculation, you also have to call
# abs_lines_per_speciesCreateFromLines again.


# 3. Sensor:
#-----------

# Definition of sensor position and LOS
# ---
ReadXML( sensor_los, "hirs/hirs.sensor_los.xml" )

# Select those views that are requested by the user
Select( sensor_los, sensor_los, views )

nrowsGet( nrows, sensor_los )
ncolsGet( ncols, sensor_los )
MatrixSetConstant( sensor_pos, nrows, ncols, 850e3 )
sensor_posAddRgeoid


# Start sensor response setup
# ---

# Normalise the sensor response
# ---
IndexSet( sensor_norm, 1 )

# Antenna
# ---
AntennaOff


# See setup_input.m for details around other sensor variables 


# Construct names of sensor description files:
 
# Nominal channel frequencies:
StringCreate( f_backend_file)
StringSet(    f_backend_file, "hirs/")
Append(       f_backend_file, satellite)
# FIXME: Remove this when using constant in Append works:
StringCreate( dummy )
StringSet(    dummy,          "_HIRS.f_backend.xml")
#
Append(       f_backend_file, dummy)

# Channel response functions:
StringCreate( backend_channel_response_file)
StringSet(    backend_channel_response_file, "hirs/")
Append(	      backend_channel_response_file, satellite)
# FIXME: Remove this when using constant in Append works:
StringSet(    dummy,          "_HIRS.backend_channel_response.xml")
#
Append(	      backend_channel_response_file, dummy)



# Spectrometer:
#
ReadXML( f_backend, f_backend_file )
ReadXML( backend_channel_response,
         backend_channel_response_file )

# Select the desired channels:
#
Select(f_backend, f_backend, channels)
Select(backend_channel_response, backend_channel_response, channels)


# Frequency grid:
#
f_gridFromSensorHIRS( f_grid,
                      f_backend, backend_channel_response,
		      f_grid_spacing )

abs_lines_per_speciesCompact

# If there was a method to convert abs_lines_per_species back to
# abs_lines, then we could do that, and save that file. The only
# problem is, though, that the lines to include are not exactly the same
# for all the different versions of the HIRS sensor. Thus, one would
# also have to perform a merge of all the different resulting line
# lists. :-(


# Construct sensor response from all these inputs:
#
sensor_responseInit
sensor_responseBackend


# End of sensor response setup


}
