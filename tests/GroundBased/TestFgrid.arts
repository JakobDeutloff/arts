# A control file to test polynomial "filling" of spectra

Arts2 {

INCLUDE "general.arts"


# ---- Species ---------------------------------------------------------------

SpeciesSet( abs_species, [ "O3", "H2O" ] )


# ---- Atmospheric scenario --------------------------------------------------

# A pressure grid rougly matching 0 to 80 km in 1 km steps.
VectorNLogSpace( p_grid, 81, 1.013e5, 1 )

AtmRawRead( t_field_raw, z_field_raw, vmr_field_raw, abs_species, 
                                                        "midlatitude-winter" )
AtmFieldsCalc


# ---- Absorption ------------------------------------------------------------

ReadXML( abs_lines, "ozone_line.xml" )
abs_lines_per_speciesCreateFromLines

abs_cont_descriptionInit


# ---- Observation geometry --------------------------------------------------

NumericCreate( z_platform )
NumericCreate( za )
 
# Platform altitude
NumericSet( z_platform, 50 )

# Zenith angle
NumericSet( za, 60 )

MatrixSetConstant( sensor_pos, 1, 1, z_platform )
Copy( z_surface, sensor_pos )
sensor_posAddRgeoid
MatrixSetConstant( sensor_los, 1, 1, za )


#--- Other stuff -------------------------------------------------------------

atm_checkedCalc

StringSet( y_unit, "RJBT" )



# ---- Create fast f_grid ----------------------------------------------------

NumericCreate( v0 )
NumericCreate( fw )
IndexCreate( nlogpart )
NumericCreate( fw_fine )
NumericCreate( df_fine )

# Centre frequency
NumericSet( v0, 1.108360400e+11 )

# One sided width of f_grid
NumericSet( fw, 500e6 )

# Numer of points (on each side) of logarithmic part
IndexSet( nlogpart, 35 )

# One sided width of fine grid at centre of f_grid
NumericSet( fw_fine, 240e3 )

# Spacing of this fine grid
NumericSet( df_fine, 40e3 )

# A logarithmically spaced grid between [fw_fine,fw]
NumericCreate( f1 )
NumericCreate( f2 )
VectorCreate( flog )
Copy( f1, fw_fine )
Copy( f2, fw )
VectorNLogSpace( flog, nlogpart, f1, f2 )

# First part of f_grid is flog "mirrored"
VectorFlip( f_grid, flog )
VectorScale( f_grid, f_grid, -1 )

# Append an equidistant grid between [-fw_fine+df_fine,fw_fine-df_fine]
VectorCreate( feqd )
Copy( f1, fw_fine )
NumericScale( f1, f1, -1 )
NumericAdd( f1, f1, df_fine )
NumericScale( f2, f1, -1 )
VectorLinSpace( feqd, f1, f2, df_fine )
Append( f_grid, feqd )

# Append flog
Append( f_grid, flog )

# Add v0
VectorAddScalar( f_grid, f_grid, v0 )


#-- Calculate spectrum and store as y1(x1)

sensorOff
yCalc

VectorCreate( x1 )
VectorCreate( y1 )
Copy( x1, f_grid )
Copy( y1, y )
#
WriteXML( output_file_format, x1, "TestFgrid.x1.xml.generated" )
WriteXML( output_file_format, y1, "TestFgrid.y1.xml.generated" )



# ---- Create reference f_grid -----------------------------------------------

Copy( f1, fw )
NumericScale( f1, f1, -1 )
VectorLinSpace( f_grid, f1, fw, 30e3 )
VectorAddScalar( f_grid, f_grid, v0 )


#-- Calculate spectrum and store as ye(x2)

sensorOff
yCalc

VectorCreate( x2 )
VectorCreate( ye )
Copy( x2, f_grid )
Copy( ye, y )
#
WriteXML( output_file_format, x2, "TestFgrid.x2.xml.generated" )
WriteXML( output_file_format, ye, "TestFgrid.ye.xml.generated" )


# ---- Create interpolated spectra --------------------------------------------

VectorCreate( y3 )
InterpTest( y3, x1, y1, x2, 3 )
WriteXML( output_file_format, y3, "TestFgrid.y3.xml.generated" )

VectorCreate( y5 )
InterpTest( y5, x1, y1, x2, 5 )
WriteXML( output_file_format, y5, "TestFgrid.y5.xml.generated" )

}