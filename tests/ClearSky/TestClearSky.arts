#DEFINITIONS:  -*-sh-*-
#
# Demonstration of a ARTS clear sky calculation
#
# Author: Stefan Buehler, adapted from older test by Patrick Eriksson


Arts2 {

INCLUDE "general"
INCLUDE "continua.arts"


# Pick out the lines we want from HITRAN and save to arts line file
# ---
#abs_linesReadFromHitran2004( abs_lines,
#                             "/storage1/pool/lookup2/hitran2004/HITRAN04.par",
#                             310e9,
#                             340e9 )
#WriteXML( output_file_format, abs_lines, "abs_lines.xml" )


# Read line file
# ---
ReadXML( abs_lines, "abs_lines.xml" )


# Frequency grid 
# Note: Should be covered by line catalog.
# ---
VectorSetExplicitly( f_grid, [320e9] )
#VectorNLinSpace( f_grid, 10, 320e9, 330e9 )

# Pressure grid
# ---
ReadXML( p_grid, "p_grid.xml" )


# Definition of species
# ---
SpeciesSet( abs_species,
            ["H2O-SelfContStandardType, H2O-ForeignContStandardType, H2O", 
             "N2-SelfContStandardType",
             "O3"] )

# Sort the line file according to species
# ---
abs_lines_per_speciesCreateFromLines

# Atmospheric profiles
# ---
AtmRawRead( t_field_raw, z_field_raw, vmr_field_raw, abs_species, "tropical" )
#
AtmFieldsCalc


# get ground altitude (z_surface) from z_field
MatrixExtractFromTensor3( z_surface, z_field, 0 )

# This could also be set explicitly like this:
#MatrixSet( z_surface, r_geoid, r_geoid, 500 )

# Surface emissivity
NumericSet( surface_emissivity, 0.9 )


# Definition of sensor position and LOS
# ---
MatrixSet( sensor_pos, 1, 1, 600e3 )
#
sensor_posAddRgeoid
#
MatrixSet( sensor_los, 1, 1, 130 )


# No sensor properties
# ---
sensorOff


# We select here to use Rayleigh-Jean brightness temperatures
# ---
StringSet( y_unit, "RJBT" )


# Perform RT calculations
# ---
timerStart
RteCalc
timerStop
    

# Write out spectrum
#WriteXML(y){"on_the_fly.y.xml.generated"}

# Write the result for the python test script
output_file_formatSetAscii
WriteXML( output_file_format, y, "ClearSky.y1.xml.generated" )

# Do the same calculation again with lookup table absorption.


# Redefine abs_scalar_gas_agenda to use the lookup table
# ---
AgendaSet( abs_scalar_gas_agenda ){
   abs_scalar_gasExtractFromLookup
}

# Set parameters for absorption lookup table generation
# ---
abs_lookupSetup( abs_p, abs_t, abs_t_pert, abs_vmrs, abs_nls, 
                 abs_nls_pert, atmosphere_dim, p_grid, lat_grid, 
                 lon_grid, t_field, vmr_field, abs_species, , , )


# Generate absorption lookup table
# ---
timerStart
abs_lookupCreate
timerStop
#WriteXML( output_file_format, abs_lookup, "" )


# Redo RT calculation, Tb conversion and save
# ---
timerStart
RteCalc
timerStop

output_file_formatSetAscii
WriteXML( output_file_format, y, "ClearSky.y2.xml.generated" )

} # End of Main
 
