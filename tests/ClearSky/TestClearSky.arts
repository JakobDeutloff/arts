#DEFINITIONS:  -*-sh-*-
#
# Demonstration of a ARTS clear sky calculation
#
# Author: Stefan Buehler, adapted from older test by Patrick Eriksson


Arts {

INCLUDE "general"
INCLUDE "continua.arts"


# Pick out the lines we want from HITRAN and save to arts line file
# ---
#abs_linesReadFromHitran2004{
#    filename = "/storage1/pool/lookup2/hitran2004/HITRAN04.par"
#    fmin      = 310e9
#    fmax      = 340e9
#}
#WriteXML(abs_lines){"abs_lines.xml"}


# Read line file
# ---
ReadXML(abs_lines){"abs_lines.xml"}


# Frequency grid 
# Note: Should be covered by line catalog.
# ---
VectorSetExplicitly(f_grid){[320e9]}
#IndexSet(nelem){10}
#VectorNLinSpace(f_grid){start = 320e9
#                        stop  = 330e9}

# Pressure grid
# ---
ReadXML(p_grid){"p_grid.xml"}


# Definition of species
# ---
SpeciesSet(abs_species){["H2O-SelfContStandardType, H2O-ForeignContStandardType, H2O", 
                         "N2-SelfContStandardType",
			 "O3"]}

# Sort the line file according to species
# ---
abs_lines_per_speciesCreateFromLines

# Atmospheric profiles
# ---
AtmRawRead{"tropical"}
#
AtmFieldsCalc


# get ground altitude (z_surface) from z_field
IndexSet(index_1){0}
MatrixExtractFromTensor3(z_surface,z_field,index_1)

# This could also be set explicitly like this:
#nrowsGet(r_geoid){}
#ncolsGet(r_geoid){}
#MatrixSet( z_surface){
#    value = 500
#}

# Surface emissivity
NumericSet(surface_emissivity){0.9}


# Definition of sensor position and LOS
# ---
IndexSet(nrows){ 1 }
IndexSet(ncols){ 1 }
MatrixSet(sensor_pos){
  value = 600e3
}
#
sensor_posAddRgeoid
#
MatrixSet(sensor_los){
  value = 130
}


# No sensor properties
# ---
sensorOff


# We select here to use Rayleigh-Jean brightness temperatures
# ---
StringSet( y_unit ){ "RJBT" }


# Perform RT calculations
# ---
timerStart
RteCalc
timerStop
    

# Write out spectrum
#WriteXML(y){"on_the_fly.y.xml.generated"}

# We need to copy to another variable and use print, so that the
# python test script can analyse the result.
Copy(vector_1,y)
Print(vector_1)

# Do the same calculation again with lookup table absorption.


# Redefine abs_scalar_gas_agenda to use the lookup table
# ---
AgendaSet( abs_scalar_gas_agenda ){
   abs_scalar_gasExtractFromLookup
}

# Set parameters for absorption lookup table generation
# ---
abs_lookupSetup


# Generate absorption lookup table
# ---
timerStart
abs_lookupCreate
timerStop
#WriteXML(abs_lookup){""}


# Redo RT calculation, Tb conversion and save
# ---
timerStart
RteCalc
timerStop
Print(y)

} # End of Main
 
