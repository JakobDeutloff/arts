# An example ARTS controlfile that calculates absorption
# coefficients. 
# SAB 16.06.2000

Arts {

INCLUDE "general"
INCLUDE "continua.arts"


# --------------------< A specific method >--------------------
#                      -------------------
# Read the spectroscopic line data from the ARTS catalogue and
# create the workspace variable `lines'.
abs_linesReadFromArts {
   filename = "lines.ac"
   fmin     = 1e9
   fmax     = 200e9
}
# This test catalogue was generated from the HITRAN catalogue in the
# following way:
#abs_linesReadFromHitran {
#        filename = "PATH_TO_ARTS-DATA/spectroscopy/hitran96/hitran96_lowfreq.par"
#        fmin     = 1e9
#        fmax     = 200e9
#}
#linesWriteAscii{"lines.ac"}

IndexSet(nelem){10}
VectorNLogSpace(p_grid){
        start = 100000
        stop  = 10
}
 
# This defines the list of absorption species. 
# Spectral lines will be assigned to the species in the order as the species
# are specified here. That means if you do ["H2O-181","H2O"], the last
# group H2O gets assigned all the H2O lines that do not fit in the
# first group.
#
# The continuum tags are special, since continua are not added by
# default. Thus, just selecting "H2O" will give you no continuum. 
SpeciesSet(abs_species){
      [ "H2O-PWR98",
	 "O2-PWR93",
	 "N2-SelfContStandardType" ] 
}

# Alternatively select all species that we can find in the scenario:
#abs_speciesDefineAllInScenario{"tropical"}

# Atmospheric profiles
AtmRawRead {
  basename = "tropical"
}

# This separates the lines into the different tag groups and creates
# the workspace variable `abs_lines_per_species':
abs_lines_per_speciesCreateFromLines {}

# Now interpolate all the raw atmospheric input onto the pressure 
# grid and create the atmospheric variables `t_field', `z_field', `vmr_field'
AtmFieldsCalc

# Initialize the input variables of abs_coefCalc from the Atm fields:
AbsInputFromAtmFields

# Set the physical H2O profile from the H2O profile in vmrs:
abs_h2oSet

# N2 likewise:
abs_n2Set

# Create the frequency grid `f_grid':
IndexSet(nelem){100}
VectorNLinSpace (f_grid) {
        start = 50e9
        stop  = 150e9    
}

# set the lineshape function for all calculated tags
abs_lineshapeDefine{
        shape = "Voigt_Kuntz6" 
        normalizationfactor = "linear"
        cutoff = -1
}

# or set it separately for each tag
#abs_lineshape_per_tgDefine{
#        shape = [ "Voigt_Kuntz6", "no_shape", "Voigt_Kuntz6", "Voigt_Kuntz6" ]
#        normalizationfactor = [ "quadratic", "no_norm", "linear", "linear" ]
#        cutoff = [ -1, -1, -1, -1 ]
#}

# Calculate absorption coefficients, both total (`abs_coef') and 
# separately for each tag group (`abs_coef_per_species'):
#abs_coefCalc

# Select species for non-linear treatment in lookup table:
SpeciesSet(abs_nls){[]}
#SpeciesSet(abs_nls){["H2O-PWR98", "O2-PWR93"]}

# Set tempertature perturbation vector for lookup table:
VectorSetExplicitly(abs_t_pert){[]}
#VectorLinSpace(abs_t_pert){
#	start = -10
#	stop = 10
#	step = 1
#}

# Set non-linear species VMR perturbation vector for lookup table:
VectorSetExplicitly(abs_nls_pert){[]}
#IndexSet(nelem){5}
#VectorNLogSpace(abs_nls_pert){
#	start = 0.01
#	stop = 10
#}

abs_lookupCreate

# Optionally write these to files:
#WriteXML (abs_t) {"simpleAbs.abs_t.xml.generated"}
#WriteXML (vmrs) {"simpleAbs.vmrs.xml.generated"}

# Write absorption coefficients to files:
#WriteXML (abs_coef) {"simpleAbs.abs_coef.xml.generated"}
#WriteXML (abs_coef_per_species) {"simpleAbs.abs_coef_per_species.xml.generated"}

# Write absorption lookup table to file:
WriteXML (abs_lookup) {"simpleAbs.abs_lookup.xml.generated"}

}

