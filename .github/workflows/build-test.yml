name: Build

on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        name: [
          ubuntu-doc,
          ubuntu-gcc-9,
          ubuntu-gcc-10,
          ubuntu-clang-13-debug,
          ubuntu-gcc-11,
          ubuntu-clang-13-nofortran,
          ubuntu-clang-14-nofortran,
          macos-gcc-11,
          macos-clang-13,
        ]

        include:
          - name: ubuntu-doc
            os: ubuntu-20.04
            compiler: clang
            version: "13"
            doc: "yes"
            arts: "no"
            fortran: "no"
            check: "no"
            libcxx: "yes"
            buildtype: "Release"

          - name: ubuntu-gcc-9
            os: ubuntu-20.04
            compiler: gcc
            version: "9"
            doc: "no"
            arts: "yes"
            fortran: "yes"
            fortran-version: "9"
            check: "yes"
            libcxx: "no"
            buildtype: "Release"

          - name: ubuntu-gcc-10
            os: ubuntu-20.04
            compiler: gcc
            version: "10"
            doc: "no"
            arts: "yes"
            fortran: "yes"
            fortran-version: "10"
            check: "yes"
            libcxx: "no"
            buildtype: "Release"

          - name: ubuntu-clang-13-debug
            os: ubuntu-20.04
            compiler: clang
            version: "13"
            doc: "no"
            arts: "yes"
            fortran: "yes"
            fortran-version: "11"
            check: "yes"
            libcxx: "yes"
            buildtype: "RelWithDebInfo"

          - name: ubuntu-gcc-11
            os: ubuntu-20.04
            compiler: gcc
            version: "11"
            doc: "no"
            arts: "yes"
            fortran: "yes"
            fortran-version: "11"
            check: "yes"
            libcxx: "no"
            buildtype: "Release"

          - name: ubuntu-clang-13-nofortran
            os: ubuntu-20.04
            compiler: clang
            version: "13"
            doc: "no"
            arts: "yes"
            fortran: "no"
            check: "yes"
            libcxx: "yes"
            buildtype: "Release"

          - name: ubuntu-clang-14-nofortran
            os: ubuntu-20.04
            compiler: clang
            version: "14"
            doc: "no"
            arts: "yes"
            fortran: "no"
            check: "yes"
            libcxx: "yes"
            buildtype: "Release"

          - name: macos-gcc-11
            os: macos-latest
            compiler: gcc
            version: "11"
            doc: "no"
            arts: "yes"
            fortran: "yes"
            fortran-version: "11"
            check: "yes"
            libcxx: "no"
            buildtype: "Release"

          - name: macos-clang-13
            os: macos-latest
            compiler: clang
            version: "13"
            doc: "no"
            arts: "yes"
            fortran: "no"
            check: "yes"
            libcxx: "no"
            buildtype: "Release"

    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 10

      - name: Setup (Linux)
        if: runner.os == 'Linux'
        run: |
          if [ "${{ matrix.compiler }}" = "clang" ] && [ "${{ matrix.version }}" -ge "13" ]; then
             sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 15CF4D18AF4F7421
             sudo add-apt-repository "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-${{ matrix.version }} main"
          fi

          sudo apt-get update

          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            sudo apt-get install -y g++-${{ matrix.version }}
            echo "CC=gcc-${{ matrix.version }}" >> $GITHUB_ENV
            echo "CXX=g++-${{ matrix.version }}" >> $GITHUB_ENV
          fi

          if [ "${{ matrix.fortran }}" = "yes" ]; then
            sudo apt-get install -y gfortran-${{ matrix.fortran-version }}
            echo "FC=gfortran-${{ matrix.fortran-version }}" >> $GITHUB_ENV
            echo "USEFORTRAN=1" >> $GITHUB_ENV
          else
            echo "USEFORTRAN=0" >> $GITHUB_ENV
          fi

          if [ "${{ matrix.compiler }}" = "clang" ]; then
            sudo apt-get install -y libunwind-dev clang++-${{ matrix.version }}
            echo "CC=clang-${{ matrix.version }}" >> $GITHUB_ENV
            echo "CXX=clang++-${{ matrix.version }}" >> $GITHUB_ENV
          fi

          if [ "${{ matrix.libcxx }}" = "yes" ]; then
            sudo apt-get install -y libc++-${{ matrix.version }}-dev libc++abi-${{ matrix.version }}-dev
            echo "CXXFLAGS=-stdlib=libc++" >> $GITHUB_ENV
          fi
          sudo apt-get install -y python3-minimal python3-pip python3-setuptools zlib1g-dev libopenblas-dev libfftw3-dev
          sudo pip3 install docutils lark-parser matplotlib netCDF4 numpy pytest scipy xarray

          if [ "${{ matrix.doc }}" = "yes" ]; then
            sudo apt-get install -y texlive texlive-latex-extra doxygen
            sudo pip3 install sphinx sphinx_rtd_theme
          fi


      - name: Setup (macOS)
        if: runner.os == 'macOS'
        run: |
          brew upgrade python
          sudo pip3 install docutils lark-parser matplotlib netCDF4 numpy pytest scipy xarray
          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            brew install gcc@${{ matrix.version }}
            echo "CC=gcc-${{ matrix.version }}" >> $GITHUB_ENV
            echo "CXX=g++-${{ matrix.version }}" >> $GITHUB_ENV
          elif [ "${{ matrix.compiler }}" = "clang" ]; then
            brew install llvm@${{ matrix.version }}
            echo "CC=/usr/local/opt/llvm@${{ matrix.version }}/bin/clang" >> $GITHUB_ENV
            echo "CXX=/usr/local/opt/llvm@${{ matrix.version }}/bin/clang++" >> $GITHUB_ENV
            if [ "${{ matrix.fortran }}" = "yes" ]; then
              brew install gcc@${{ matrix.fortran-version }}
            fi
          else
            exit 1
          fi

          if [ "${{ matrix.fortran }}" = "yes" ]; then
            echo "FC=gfortran-${{ matrix.fortran-version }}" >> $GITHUB_ENV
            echo "USEFORTRAN=1" >> $GITHUB_ENV
          else
            echo "USEFORTRAN=0" >> $GITHUB_ENV
          fi

      - name: Configure (Linux / macOS)
        if: runner.os == 'Linux' || runner.os == 'macOS'
        run: |
          mkdir cmake-build
          cd cmake-build
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.buildtype }} -DENABLE_PCH=1 -DNUM_PYARTS_WSM=2 -DNUM_PYARTS_WSV=1 -DNUM_PYARTS_WSC=1 -DNUM_PYARTS_WSG=1 -DENABLE_FORTRAN=$USEFORTRAN ..

      - name: Build (Linux / macOS)
        if: (runner.os == 'Linux' || runner.os == 'macOS') && matrix.arts == 'yes'
        run: |
          cd cmake-build
          make -j2 -C 3rdparty
          make -j2 arts
          make -j1 pyarts_cpp
          make -j2 -C src

      - name: Docs (Linux / macOS)
        if: (runner.os == 'Linux' || runner.os == 'macOS') && matrix.doc == 'yes'
        run: |
          cd cmake-build
          make -j2 -C 3rdparty
          make -j2 arts
          make -j1 pyarts_cpp
          make -j2 -C doc/uguide
          make -j2 -C doc/doxygen
          make -j2 pyarts_docs

      - name: Check (Linux / macOS)
        if: (runner.os == 'Linux' || runner.os == 'macOS') && matrix.check == 'yes'
        run: |
          cd cmake-build
          make check

      - name: Check Python (Linux / macOS)
        if: matrix.check == 'yes'
        run: |
          cd cmake-build
          make check-python

