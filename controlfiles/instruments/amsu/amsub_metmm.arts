#DEFINITIONS:  -*-sh-*-

# ARTS setup file for AMSUB simulations

Arts2 {


# 1. General
#-----------

output_file_formatSetZippedAscii

# AMSU uses Planck brightness temperatures
# ---
StringSet( iy_unit, "PlanckBT" )

#
# modifiy the maximum propagation step, from the default to 250 m :
#
NumericSet( ppath_lmax, 250 )

# Surface
Copy( surface_rtprop_agenda,
      surface_rtprop_agenda__Specular_NoPol_ReflFix_SurfTFromt_surface )

# Polarisation test
#NumericSet(surface_skin_t, 285)
#complex_refr_indexConstant(surface_complex_refr_index, 1.5, 0.0)
#AgendaSet( surface_rtprop_agenda ){
#  specular_losCalc
#  surfaceFlatRefractiveIndex
#} 


# 2. Spectroscopy
#----------------

# We take a smaller cutoff, since the line-by-line calculation is 
# only for O3, where only the local lines matter.
# Could be speed-optimized further by selecting only the relevant 
# lines from the line list.
ArrayOfLineshapeSpecCreate( abs_lineshapeDefine )
abs_lineshapeDefine( abs_lineshapeDefine, "Voigt_Kuntz6", "VVH", 5e9 )

abs_speciesSet( species=[ "H2O-PWR98",
                          "O3",
                          "O2-PWR93",
                          "N2-SelfContStandardType" ] )

# Read HITRAN catalog (needed for O3):
#abs_linesReadFromHitran( abs_lines,
#                         "HITRAN2012.par",
#                         80e9,
#                         200e9 )
#WriteXML( "ascii", abs_lines, "amsub.hitran12_o3_lines.xml" )

ReadXML( abs_lines, "amsub.hitran12_o3_lines.xml" )
abs_lines_per_speciesCreateFromLines

# WARNING: If you redefine abs_species, and want to do a line-by-line
# calculation, you also have to call
# abs_lines_per_speciesCreateFromLines again.


# 3. Sensor:
#-----------

# Definition of sensor position and LOS
# ---
MatrixSetConstant( sensor_pos, 1, 1, 850e3 )

# Nadir looking direction of the sensor
MatrixSetConstant( sensor_los, 1, 1, 180 )

# Channels we want to calculate. Note, zero-based indexing!
ArrayOfIndexCreate( channels )
ArrayOfIndexSet( channels, [ -1 ] )

ArrayOfIndexCreate( viewing_angles )
# This would select all viewing angles
#ArrayOfIndexSet( viewing_angles, [ -1 ] )
# For speed reasons, we just calculate one angle
ArrayOfIndexSet( viewing_angles, [ 44 ] )

# Set accuracy to high
IndexCreate(met_mm_accuracy)
IndexSet(met_mm_accuracy, 2)

INCLUDE "instruments/metmm/sensor_descriptions/sensor_amsub.arts"
INCLUDE "instruments/metmm/sensor_descriptions/apply_metmm.arts"

WriteXML("ascii", sensor_response)
WriteXML("ascii", f_grid)
WriteXML("ascii", sensor_response_f_grid)
WriteXML("ascii", sensor_response_f)

}
