#DEFINITIONS:  -*-sh-*-
#
# Demonstration and test of a single radio link calculation, using yCalc.
#
# The link between two satellites is simulated.
#
# 2012-08-20, Patrick Eriksson

Arts2 {

INCLUDE "general/general.arts"
INCLUDE "general/continua.arts"


# Number of Stokes components to be computed
#
IndexSet( stokes_dim, 1 )

# Frequency grid 
#
VectorSet( f_grid, [ 1e9, 5e9, 10e9 ] )


# A pressure grid rougly matching 0 to 80 km, in steps of 250.
#
VectorNLogSpace( p_grid, 321, 1013e2, 1 )


# Definition of species
# 
SpeciesSet( abs_species,
            ["H2O-PWR98", 
             "N2-SelfContStandardType",
             "O2-PWR93"] )


# No line data needed here
# 
abs_lines_per_speciesSetEmpty


# Dimensionality of the atmosphere
#
AtmosphereSet1D

# Atmospheric profiles
# 
AtmRawRead( t_field_raw, z_field_raw, vmr_field_raw, abs_species, 
            "atmosphere_data/tropical" )
#
AtmFieldsCalc( t_field, z_field, vmr_field, p_grid, 
               lat_grid, lon_grid, t_field_raw, z_field_raw, 
               vmr_field_raw, atmosphere_dim, 3 )


# Surface altitude
MatrixSetConstant( z_surface, 1, 1, 0 )


# No scattering
#
cloudboxOff

# No jacobian calculations
#
jacobianOff

# Check model atmosphere
# 
basics_checkedCalc
cloudbox_checkedCalc


# Propagation path agendas and variables
#
AgendaSet( ppath_step_agenda ){
  ppath_stepRefractionBasic
}
NumericSet( ppath_lmax, 10e3 )
NumericSet( ppath_lraytrace, 100 )
#
AgendaSet( ppath_agenda ){
  Ignore( rte_los )
  Ignore( cloudbox_on )
  Ignore( ppath_inside_cloudbox_do )
  ppathFromRtePos2
}


# Radiative transfer agendas and variables
#
AgendaSet( iy_transmitter_agenda ){
  Ignore( rte_pos )
  Ignore( rte_los )
  MatrixUnitIntensity( iy, stokes_dim, f_grid )
}
AgendaSet( iy_main_agenda ){
  Ignore( rte_los )
  iyRadioLink
}


# Calculations here done through yCalc as it is then easier to extract
# auxiliary data. For this we need some additional and dummy settings, 
# compared to use iyCalc.


# Sensor/receiver and transmitter
#
MatrixSet( sensor_pos, [ 600e3 ] )
MatrixSet( sensor_los, [     0 ] )    # Dummy value
MatrixSet( transmitter_pos, [ 600e3, 48.3 ] )
#
sensorOff


# Auxilary variables
#
# Other aux variables either path of iy (total loss) or can not be obtained
# through yCalc.
#
ArrayOfStringSet( iy_aux_vars, [ "Bending angle", "Extra path delay" ] )



# Expected results
#
VectorCreate( yREFERENCE )
NumericCreate( bending_angleREFERENCE )
NumericCreate( extra_pdREFERENCE )
#
VectorSet( yREFERENCE, [ 5.44894e-16, 5.27306e-16, 4.99902e-16 ] )
NumericSet( bending_angleREFERENCE, 0.6921 )
NumericSet( extra_pdREFERENCE, 636.838e-09 )


# Calculate and check iy
#
yCalc
#
VectorCompare( y, yREFERENCE, 1e-18 )


# Bending angle
#
VectorCreate( vdummy )
NumericCreate( bending_angle )
Extract( vdummy, y_aux, 0 )
Extract( bending_angle, vdummy, 0 )
NumericCompare( bending_angle, bending_angleREFERENCE, 1e-4 )


# Extra path delay
#
NumericCreate( extra_pd )
Extract( vdummy, y_aux, 1 )
Extract( extra_pd, vdummy, 0 )
NumericCompare( extra_pd, extra_pdREFERENCE, 1e-10 )

}
 
