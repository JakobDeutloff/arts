Arts2{
  

#   Can run with abs_xsec_per_speciesAddLines by uncommenting:
#   abs_lineshapeDefine(abs_lineshape, "Faddeeva_Algorithm_916", "no_norm", -1)
#   Will fail at first derivatives...
  
  ## Constants (changes here might require changes in perturbations to match)
  abs_speciesSet(species=["O2-66"])
  VectorNLinSpace(f_grid, 101, 90e9, 110e9)
  Touch(rtp_nlte)
  VectorSet(rtp_vmr, [0.21])
  NumericSet(rtp_temperature, 250)
  NumericSet(rtp_pressure, 25000)
  IndexSet(stokes_dim, 1)
  Touch(select_abs_species)
  
  ## Calculate w/o NLTE
  nlteOff
  
  ## Comparative parameter
  PropagationMatrixCreate(testdata)
  ArrayOfPropagationMatrixCreate(dtestdata)
  
  ## Absorption lines (Doppler, no Zeeman, no NLTE, no mirroring, no normalization)
  ReadXML(abs_lines, "testdata/lm-vp-line.xml")
  ArrayOfAbsorptionLinesCreate(aolr)
  Copy(aolr, abs_lines)
  abs_lines_per_speciesCreateFromLines
  
  ## Line matching information
  ArrayOfQuantumIdentifierCreate(qi_lines)
  ReadXML(qi_lines, "testdata/qi-line.xml")
  QuantumIdentifierCreate(QI)
  Extract(QI, qi_lines, 0)
  
  ## Silly parameters that have to be set by agendas and ARTS in general but are completely useless for these calculations
  VectorSet(p_grid, [150])  # We have no grid
  VectorSet(lat_grid, [0])  # We have no grid
  VectorSet(lon_grid, [0])  # We have no grid
  IndexSet(atmosphere_dim, 1)  # We have no atmosphere
  MatrixSet(sensor_pos, [0, 0, 0])  # We have no sensor
  sensorOff  # We have no sensor
  IndexSet(propmat_clearsky_agenda_checked, 1)  # We have no propmat agenda
  
  ## Set up partial derivatives
  jacobianInit
  jacobianAddTemperature(g1=p_grid, g2=[0], g3=[0])
  jacobianAddWind(g1=p_grid, g2=[0], g3=[0], dfrequency=0.1)
  jacobianAddAbsSpecies(g1=p_grid, g2=[0], g3=[0], species="O2-66", for_species_tag=0)
  jacobianAddBasicCatalogParameters(catalog_identities=qi_lines, catalog_parameters=["LineStrength", "LineCenter"])
  jacobianAddShapeCatalogParameter(line_identity=QI, variable="G0", coefficient="X0", species="AIR")
  jacobianAddShapeCatalogParameter(line_identity=QI, variable="G0", coefficient="X1", species="AIR")
  jacobianAddShapeCatalogParameter(line_identity=QI, variable="D0", coefficient="X0", species="AIR")
  jacobianAddShapeCatalogParameter(line_identity=QI, variable="D0", coefficient="X1", species="AIR")
  jacobianAddShapeCatalogParameter(line_identity=QI, variable="Y", coefficient="X0", species="AIR")
  jacobianAddShapeCatalogParameter(line_identity=QI, variable="Y", coefficient="X1", species="AIR")
  jacobianAddShapeCatalogParameter(line_identity=QI, variable="Y", coefficient="X2", species="AIR")
  jacobianAddShapeCatalogParameter(line_identity=QI, variable="G", coefficient="X0", species="AIR")
  jacobianAddShapeCatalogParameter(line_identity=QI, variable="G", coefficient="X1", species="AIR")
  jacobianAddShapeCatalogParameter(line_identity=QI, variable="G", coefficient="X2", species="AIR")
  jacobianAddShapeCatalogParameter(line_identity=QI, variable="DV", coefficient="X0", species="AIR")
  jacobianAddShapeCatalogParameter(line_identity=QI, variable="DV", coefficient="X1", species="AIR")
  jacobianAddShapeCatalogParameter(line_identity=QI, variable="DV", coefficient="X2", species="AIR")
  jacobianClose
  
  # Perform calculations for analytical propagation matrix and derivatives
  lbl_checkedCalc
  propmat_clearskyInit
  propmat_clearskyAddLines
  #WriteXML("ascii", propmat_clearsky, "testdata/test-lm-vp/propmat.xml")
  #WriteXML("ascii", dpropmat_clearsky_dx, "testdata/test-lm-vp/dpropmat.xml")
  ReadXML(testdata, "testdata/test-lm-vp/propmat.xml")
  CompareRelative(testdata, propmat_clearsky, 1e-6)
  ReadXML(dtestdata, "testdata/test-lm-vp/dpropmat.xml")
  CompareRelative(dtestdata, dpropmat_clearsky_dx, 1e-4)
  
  # Turn off the jacobian to make for faster calculations for perturbations below
  jacobianOff
  
  # Perform calculations for perturbed temperature derivative
  NumericSet(rtp_temperature, 250.0001)
  propmat_clearskyInit
  propmat_clearskyAddLines
  NumericSet(rtp_temperature, 250)
  #WriteXML("ascii", propmat_clearsky, "testdata/test-lm-vp/propmat-dT.xml")
  ReadXML(testdata, "testdata/test-lm-vp/propmat-dT.xml")
  CompareRelative(testdata, propmat_clearsky, 1e-6)
  
  # Perform calculations for perturbed frequency derivative
  VectorNLinSpace(f_grid, 101, 90000000100, 110000000100)
  propmat_clearskyInit
  propmat_clearskyAddLines
  VectorNLinSpace(f_grid, 101, 90e9, 110e9)
  #WriteXML("ascii", propmat_clearsky, "testdata/test-lm-vp/propmat-df.xml")
  ReadXML(testdata, "testdata/test-lm-vp/propmat-df.xml")
  CompareRelative(testdata, propmat_clearsky, 1e-6)
  
  # Perform calculations for perturbed VMR derivative
  VectorSet(rtp_vmr, [0.2101])
  propmat_clearskyInit
  propmat_clearskyAddLines
  VectorSet(rtp_vmr, [0.21])
  #WriteXML("ascii", propmat_clearsky, "testdata/test-lm-vp/propmat-dvmr.xml")
  ReadXML(testdata, "testdata/test-lm-vp/propmat-dvmr.xml")
  CompareRelative(testdata, propmat_clearsky, 1e-6)
  
  # Perform calculations for perturbed line strength derivative
  abs_linesChangeBaseParameterForMatchingLines(QI=QI, parameter_name="Line Strength", change=1e-17, relative=0)
  abs_lines_per_speciesCreateFromLines
  propmat_clearskyInit
  propmat_clearskyAddLines
  Copy(abs_lines, aolr)
  #WriteXML("ascii", propmat_clearsky, "testdata/test-lm-vp/propmat-ds0.xml")
  ReadXML(testdata, "testdata/test-lm-vp/propmat-ds0.xml")
  CompareRelative(testdata, propmat_clearsky, 1e-6)
  
  # Perform calculations for perturbed line center derivative
  abs_linesChangeBaseParameterForMatchingLines(QI=QI, parameter_name="Line Center", change=1e1, relative=0)
  abs_lines_per_speciesCreateFromLines
  propmat_clearskyInit
  propmat_clearskyAddLines
  Copy(abs_lines, aolr)
  #WriteXML("ascii", propmat_clearsky, "testdata/test-lm-vp/propmat-df0.xml")
  ReadXML(testdata, "testdata/test-lm-vp/propmat-df0.xml")
  CompareRelative(testdata, propmat_clearsky, 1e-6)
}
