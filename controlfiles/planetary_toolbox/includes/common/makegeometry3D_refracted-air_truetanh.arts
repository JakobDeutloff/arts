################################################################################
#                                                                              #
# This is a (plug&play-type) include file. The USER is NOT supposed to MODIFY  #
# it, but choose another include file to suit his/her needs.                   #
#                                                                              #
################################################################################
#                                                                              #
# This INCLUDE file is for                                                     #
#  - considering refraction of "air"                                           #
#  - 3D calculations                                                           #
#  - several viewing angles (incl. tangent altitudes) from constant observer   #
#     position                                                                 #
#  - for use with iyCalc (not yCalc)                                           #
#  - for receiver-only setups (no receiver-transmitter paths!)                 #
#                                                                              #
# It performs the following actions:                                           #
#  - sets ppath_agenda: receiver-viewingangle determined path (no transmitter) #
#  - sets ppath_step_agenda: refracted ppath calculation                       #
#  - sets refr_index_air_agenda: refr_index_airMWgeneral for air               #
#  - calculates viewing angles from given vector of tangent altitudes          #
#     (refracted rays will have their true tangent altitudes at the altitudes  #
#     altitudes set by the user) assuming a spherical planet of equatorial     #
#     radius of the (possibly) given ellipsoid.                                #
#     NOTE: in calculation of true tangent altitudes a homogeneous atmosphere  #
#      (conditions as defined for south-westernmost grid point).               #
#  - creates a common vector from (given) viewing angle vector and the viewing #
#     angles associated with the tangent altitudes                             #
#  - sets sensor positions: constant receiver position, empty transmitter      #
#                                                                              #
# It requires the following input:                                             #
#   viewang_zen     Vector; the zenith viewing angles                          #
#   viewang_azi     Vector; the corresponding azimuth viewing angles           #
#   tanh            Vector; the tangent altitudes                              #
#   tanh_azi        Vector; the tanh corresponding azimuth viewing angles      #
#   obsh            Numeric; the receiver altitude                             #
#   obslat/lon      Numeric; the receiver geographic position                  #
#   refellipsoid    as the WSV                                                 #
#   atmosphere_dim  as the WSV                                                 #
# It also uses (OVERWRITES!) sensor_pos                                        #
#                                                                              #
# It provides following output:                                                #
#   allzang_zen     Vector; merged zenith viewing angles resulting from        #
#                    viewang_zen and calculated viewing angles resulting from  #
#                    tanh                                                      #
#   allzang_azi     Vector; merged azimuth viewing angles resulting from       #
#                    viewang_azi and tanh_azi                                  #
#                                                                              #
# The file shall NOT be modified by the USER.                                  #
#                                                                              #
# This template creates (and makes internal use of) the following non-WSV:     #
#  (These are created here, i.e., they can not be used by earlier parts of the #
#  script or created again (it also implies, this include can only be included #
#  once in an ARTS run!). They can be used in later parts of the script,       #
#  though.)                                                                    #
#   planetR         Vector                                                     #
#   zang            Vector                                                     #
#   ntanh           Index                                                      #
#                                                                              #
################################################################################

Arts2 {

# receiver-viewingangle-path
Copy( ppath_agenda, ppath_agenda__FollowSensorLosPath )

# refracted path
Copy( ppath_step_agenda, ppath_step_agenda__RefractedPath )

# refraction from "air"
# (using general planet applicable method refr_index_airMWgeneral)
Copy( refr_index_air_agenda, refr_index_air_agenda__GasMWgeneral )


# DO NOT MODIFY
# preprocessing of viewing geometry parameters
VectorCreate( planetR )
VectorCreate( allang_zen )
VectorCreate( allang_azi )
#
Select( planetR, refellipsoid, [0] )
VectorSet( allang_zen, [0.] ) # allang_zen just used as container
Append( planetR, allang_zen )
#
Copy( allang_zen, viewang_zen )
Copy( allang_azi, viewang_azi )
#
VectorCreate( zang )
IndexCreate( ntanh )
nelemGet( ntanh, tanh )
MatrixSetConstant( sensor_pos, ntanh, 1, obsh )
# We do not explicitly extract z/t/vmr_field of a certain grid point, but pass
#  the 3D versions into. This is not 100% clean, but works because internally
#  get_refr_index_1d is applied, which acts on the zeroth lat and lon elements
#  of z/t/vmr_field.
VectorZtanToZaRefr1D( zang, refr_index_air_agenda, sensor_pos,
                      p_grid, t_field, z_field, vmr_field,
                      planetR, 1, f_grid, tanh )
Append( allang_zen, zang )
Append( allang_azi, tanh_azi )
#WriteXML( in=allang_zen )
#Print( allang_zen )


# for use with yCalc (not updated for 3D)
#Matrix1ColFromVector( sensor_los, allzang )
#nrowsGet( itmp, sensor_los )
#MatrixSetConstant( sensor_pos, itmp, 1, obsh )

# for use with looped iyCalc, i.e., we have to set rte_pos, not sensor_pos
VectorSetConstant( rte_pos, 1, obsh )
VectorSetConstant( zang, 1, obslat )
Append( rte_pos, zang )
VectorSetConstant( zang, 1, obslon )
Append( rte_pos, zang )
VectorSet( rte_pos2, [] )

}
