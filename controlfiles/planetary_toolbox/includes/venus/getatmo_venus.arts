#####
#
# This file does the actual work of selecting and reading in Jovian atmospheric
# data as specified by the user in the MyJupiter.arts template.
#
# This file expects the following input parameters:
#   atmo           (Index)           The atmospheric scenario.
#   basespecies    (ArrayOfIndex)    The abs_species to use (includes only such
#                                     with on/off options only).
#   h2ospecies     (ArrayOfIndex)    H2O setup selected (off/low/medium/high).
#   ndospecies     (ArrayOfIndex)    HDO setup selected
#                                     (off/low/medium/high/uncorrected).
#   Necase         (ArrayOfIndex)    Electron density setup selected
#                                     (off/different sza-dependencies).
#
# It provides following output:
#   z_field_raw        as the WSV
#   t_field_raw        as the WSV
#   vmr_field_raw      as the WSV
#   abs_species        as the WSV
#
# Unless further variables or options for existing variables are introduced,
# there is NO need to MODOFY this file.
#
#####

Arts2 {

#StringSet( tmpformat, "ascii" )
StringSet( tmpformat, "binary" )

StringSet( vmrtmp, "tmp1.xml" )
StringSet( abstmp, "tmp2.xml" )

AgendaCreate( subspeciesloop_agenda )
AgendaSet( subspeciesloop_agenda ){
  ReadXML( out=vmr_field_raw, filename=vmrtmp )
  ReadXML( out=abs_species, filename=abstmp )
  abs_speciesAdd( species=speciesname )
  Extract( strtmp, casearray, forloop_index )
  Append( specfilename, strtmp )
#  Print( specfilename, 0 )
  ReadXML( gf3tmp, specfilename )
  Append( vmr_field_raw, gf3tmp )
  WriteXML( output_file_format=tmpformat, in=vmr_field_raw, filename=vmrtmp )
  WriteXML( output_file_format=tmpformat, in=abs_species, filename=abstmp )
}

AgendaCreate( speciesloop_agenda )
AgendaSet( speciesloop_agenda ){
  ReadXML( out=vmr_field_raw, filename=vmrtmp )
  Extract( strtmp, casearray, forloop_index )
  Append( specfilename, strtmp )
#  Print( specfilename, 0 )
  ReadXML( gf3tmp, specfilename )
  Append( vmr_field_raw, gf3tmp )
  WriteXML( output_file_format=tmpformat, in=vmr_field_raw, filename=vmrtmp )
}


# Read the atmospheric setup
# ---
# first, create the casename string down to the common filename part in the
# scenario folder.
Copy( atmostr, atmobase )
Extract( subatmo, atmoarray, atmo )
Append( atmostr, subatmo )
StringSet( strtmp, "/" )
Append( atmostr, strtmp )
Append( atmostr, subatmo )
StringSet( strtmp, "." )
Append( atmostr, strtmp )

# second, we construct the name for the specific data files one-by-one and read
# into corresponding variable
Touch( vmr_field_raw )
Touch( abs_species )
WriteXML( output_file_format=tmpformat, in=vmr_field_raw, filename=vmrtmp )
WriteXML( output_file_format=tmpformat, in=abs_species, filename=abstmp )

# (1) z = Altitude
Copy( specfilename, atmostr )
StringSet( strtmp, "z.xml" )
Append( specfilename, strtmp )
ReadXML( z_field_raw, specfilename )

# (2) t = Temperature
Copy( specfilename, atmostr )
StringSet( strtmp, "t.xml" )
Append( specfilename, strtmp )
ReadXML( t_field_raw, specfilename )

# (3) Ne = electron density
Copy( specfilename, atmostr )
ArrayOfStringSet( speciesname, ["free_electrons"] )
Select( casearray, Nearray, Necase )
nelemGet( ncases, casearray )
IndexStepDown( ncases, ncases )
Copy( forloop_agenda, subspeciesloop_agenda )
ForLoop( forloop_agenda, 0, ncases, 1 )
ReadXML( out=abs_species, filename=abstmp )

# (4) base-vmr (species without subscenarios)
Copy( specfilename, atmostr )
Select( speciesname, basespeciesarray, basespecies )
abs_speciesAdd( species=speciesname )
WriteXML( output_file_format=tmpformat, in=abs_species, filename=abstmp )
Select( casearray, basespeciesnamesarray, basespecies )
nelemGet( ncases, casearray )
IndexStepDown( ncases, ncases )
Copy( forloop_agenda, speciesloop_agenda )
ForLoop( forloop_agenda, 0, ncases, 1 )

# (5) HDO (this before H2O, else it does not have any effect)
Copy( specfilename, atmostr )
ArrayOfStringSet( speciesname, ["H2O-162"] )
Select( casearray, HDOarray, hdospecies )
nelemGet( ncases, casearray )
IndexStepDown( ncases, ncases )
Copy( forloop_agenda, subspeciesloop_agenda )
ForLoop( forloop_agenda, 0, ncases, 1 )

# (6) H2O
Copy( specfilename, atmostr )
ArrayOfStringSet( speciesname, ["H2O"] )
Select( casearray, H2Oarray, h2ospecies )
nelemGet( ncases, casearray )
IndexStepDown( ncases, ncases )
Copy( forloop_agenda, subspeciesloop_agenda )
ForLoop( forloop_agenda, 0, ncases, 1 )


# now we're ready with the abs_species (and vmr_fields).
ReadXML( out=abs_species, filename=abstmp )
ReadXML( out=vmr_field_raw, filename=vmrtmp )
Print( abs_species )
#nelemGet( itmp, abs_species )
#Print( itmp )
#nelemGet( ncases, vmr_field_raw )
#Print( ncases )
#Compare( ncases, itmp, 0,
#         "Number of entries in abs_species and in vmr_field are not consistent!" )

}
 
