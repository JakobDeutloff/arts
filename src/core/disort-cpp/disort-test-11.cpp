#include <disort-test.h>

void test_11a_1layer() try {
  const Vector tau_arr{8.};
  const Vector omega_arr{0.999999};
  const Index NQuad = 16;
  const Matrix Leg_coeffs_all{
      Vector{1.00000000e+00, 7.50000000e-01, 5.62500000e-01, 4.21875000e-01,
             3.16406250e-01, 2.37304688e-01, 1.77978516e-01, 1.33483887e-01,
             1.00112915e-01, 7.50846863e-02, 5.63135147e-02, 4.22351360e-02,
             3.16763520e-02, 2.37572640e-02, 1.78179480e-02, 1.33634610e-02,
             1.00225958e-02, 7.51694682e-03, 5.63771011e-03, 4.22828259e-03,
             3.17121194e-03, 2.37840895e-03, 1.78380672e-03, 1.33785504e-03,
             1.00339128e-03, 7.52543458e-04, 5.64407594e-04, 4.23305695e-04,
             3.17479271e-04, 2.38109454e-04, 1.78582090e-04, 1.33936568e-04}
          .reshape(tau_arr.nelem(), 32)};

  const Numeric mu0 = 0.6;
  const Numeric I0 = Constant::pi / mu0;
  const Numeric phi0 = 0.9 * Constant::pi;
  const Matrix b_neg(1, 1, 1);
  const Matrix b_pos(1, 1, 1);
  const std::vector<disort::BDRF> BDRF_Fourier_modes{};
  //  disort::BDRF{[](auto c, auto&, auto&) { c = 0.1; }}};
  const Matrix s_poly_coeffs{
      Vector{172311.79936609, -102511.4417051}.reshape(tau_arr.nelem(), 2)};
  const Vector f_arr{Leg_coeffs_all(joker, NQuad)};

  // Optional (unused)
  const Index NLeg = NQuad;
  const Index NFourier = NQuad;

  const disort::main_data dis(NQuad,
                              NLeg,
                              NFourier,
                              tau_arr,
                              omega_arr,
                              Leg_coeffs_all,
                              b_pos,
                              b_neg,
                              f_arr,
                              s_poly_coeffs,
                              BDRF_Fourier_modes,
                              mu0,
                              I0,
                              phi0);

  const Vector taus{
      0.06354625877794251,
      0.6354625877794251,
      6.354625877794252,
  };
  const Vector phis{
      0.0,
      1.5705463267948965,
      3.141092653589793,
      4.71163898038469,
      6.282185307179586,
  };
  const Tensor3 u{Vector{
      -209606883626.34702, -257142470250.61578, -324686082983.909,
      -400534528112.0527,  -476369544127.0768,  -544320583885.5717,
      -596888613753.5238,  -628101959420.7306,  -174833453334.38443,
      -68269305272.55749,  -24911268185.161896, -10494974361.610271,
      -5299505097.50298,   -3210630128.3923397, -2300134340.996755,
      -1922537131.240743,  -305944136094.114,   -341205251420.1163,
      -397464277090.05273, -465983639740.5983,  -537605405665.36743,
      -603223029047.7653,  -654454671515.316,   -684947684803.4353,
      -288331804323.8823,  -250259026177.44464, -180152079724.66302,
      -110326211087.14908, -66264897160.20837,  -43026615656.164406,
      -31563122932.023182, -26532870807.28473,  -879798186827.0436,
      -912179165488.4274,  -966874097360.9667,  -1036487348782.7394,
      -1102500450854.541,  -1150181090127.5288, -1178761920218.7905,
      -1192687414174.0837, -864206836625.0574,  -832302657217.9971,
      -779952516079.7228,  -714566376663.1825,  -645043069127.5765,
      -580837775348.442,   -530746066181.6107,  -501087806619.74054,
      -209606883626.08313, -257142470250.33487, -324686082983.6413,
      -400534528111.833,   -476369544126.9167,  -544320583885.4659,
      -596888613753.4615,  -628101959420.7042,  -174833453334.1507,
      -68269305272.451485, -24911268185.11059,  -10494974361.577415,
      -5299505097.476763,  -3210630128.369069,  -2300134340.977375,
      -1922537131.2294788, -305944136093.7976,  -341205251419.8244,
      -397464277089.809,   -465983639740.41565, -537605405665.24176,
      -603223029047.685,   -654454671515.27,    -684947684803.4159,
      -288331804323.5565,  -250259026177.10864, -180152079724.3515,
      -110326211086.88718, -66264897159.98601,  -43026615655.97057,
      -31563122931.866753, -26532870807.19621,  -879798186827.0292,
      -912179165488.4153,  -966874097360.958,   -1036487348782.7336,
      -1102500450854.5376, -1150181090127.5269, -1178761920218.7896,
      -1192687414174.0835, -864206836625.0416,  -832302657217.9783,
      -779952516079.6979,  -714566376663.1475,  -645043069127.5278,
      -580837775348.3829,  -530746066181.55457, -501087806619.7083,
      -209606883625.27316, -257142470249.62955, -324686082983.12573,
      -400534528111.50977, -476369544126.73444, -544320583885.3707,
      -596888613753.416,   -628101959420.6884,  -174833453333.3451,
      -68269305271.98978,  -24911268184.75732,  -10494974361.16764,
      -5299505097.005872,  -3210630128.118466,  -2300134340.9073176,
      -1922537131.2162669, -305944136093.0396,  -341205251419.225,
      -397464277089.4073,  -465983639740.17755, -537605405665.1116,
      -603223029047.6174,  -654454671515.238,   -684947684803.4047,
      -288331804322.7096,  -250259026176.05847, -180152079722.96594,
      -110326211084.98758, -66264897157.67146,  -43026615654.589554,
      -31563122931.420113, -26532870807.101757, -879798186827.0194,
      -912179165488.4076,  -966874097360.9525,  -1036487348782.7303,
      -1102500450854.5356, -1150181090127.526,  -1178761920218.789,
      -1192687414174.0833, -864206836625.0308,  -832302657217.9651,
      -779952516079.6791,  -714566376663.118,   -645043069127.4813,
      -580837775348.3231,  -530746066181.5052,  -501087806619.68695,
      -209606883626.26096, -257142470250.52097, -324686082983.8144,
      -400534528111.9698,  -476369544127.0123,  -544320583885.52637,
      -596888613753.4952,  -628101959420.7178,  -174833453334.30975,
      -68269305272.52483,  -24911268185.147,    -10494974361.601595,
      -5299505097.496391,  -3210630128.3863683, -2300134340.991043,
      -1922537131.2363706, -305944136094.0059,  -341205251420.0135,
      -397464277089.96277, -465983639740.5269,  -537605405665.31525,
      -603223029047.7301,  -654454671515.2949,  -684947684803.4257,
      -288331804323.7729,  -250259026177.3354,  -180152079724.56644,
      -110326211087.07283, -66264897160.146194, -43026615656.10941,
      -31563122931.97345,  -26532870807.249092, -879798186827.0367,
      -912179165488.4216,  -966874097360.9626,  -1036487348782.7366,
      -1102500450854.539,  -1150181090127.5278, -1178761920218.79,
      -1192687414174.0835, -864206836625.0499,  -832302657217.9883,
      -779952516079.7112,  -714566376663.1667,  -645043069127.5549,
      -580837775348.4164,  -530746066181.5858,  -501087806619.7253,
      -209606883626.34708, -257142470250.61578, -324686082983.909,
      -400534528112.05273, -476369544127.0767,  -544320583885.5718,
      -596888613753.5238,  -628101959420.7306,  -174833453334.3845,
      -68269305272.55751,  -24911268185.161892, -10494974361.610271,
      -5299505097.502978,  -3210630128.392341,  -2300134340.996757,
      -1922537131.2407446, -305944136094.11395, -341205251420.11633,
      -397464277090.05273, -465983639740.59845, -537605405665.3675,
      -603223029047.7653,  -654454671515.316,   -684947684803.4353,
      -288331804323.8824,  -250259026177.44467, -180152079724.6631,
      -110326211087.14912, -66264897160.208405, -43026615656.16444,
      -31563122932.023193, -26532870807.284744, -879798186827.0436,
      -912179165488.4274,  -966874097360.9667,  -1036487348782.7394,
      -1102500450854.541,  -1150181090127.5288, -1178761920218.7905,
      -1192687414174.0837, -864206836625.0574,  -832302657217.9971,
      -779952516079.7228,  -714566376663.1825,  -645043069127.5765,
      -580837775348.4419,  -530746066181.6107,  -501087806619.74054,
  }
                      .reshape(5, 3, 16)};
  const Matrix u0{Vector{
      -209606883626.00375, -257142470250.28555, -324686082983.6277,
      -400534528111.84326, -476369544126.93555, -544320583885.484,
      -596888613753.4741,  -628101959420.7104,  -174833453334.06076,
      -68269305272.389984, -24911268185.053436, -10494974361.494385,
      -5299505097.377686,  -3210630128.321472,  -2300134340.9694824,
      -1922537131.230835,  -305944136093.74896, -341205251419.80164,
      -397464277089.8111,  -465983639740.4307,  -537605405665.25934,
      -603223029047.6997,  -654454671515.2797,  -684947684803.4204,
      -288331804323.49194, -250259026177.00397, -180152079724.1669,
      -110326211086.55237, -66264897159.54083,  -43026615655.73462,
      -31563122931.828125, -26532870807.208557, -879798186827.0322,
      -912179165488.418,   -966874097360.96,    -1036487348782.735,
      -1102500450854.5383, -1150181090127.5273, -1178761920218.7898,
      -1192687414174.0835, -864206836625.0449,  -832302657217.9822,
      -779952516079.7028,  -714566376663.1538,  -645043069127.5353,
      -580837775348.3914,  -530746066181.5642,  -501087806619.7153,
  }
                      .reshape(3, 16)};
  const Vector flux_down_diffuse{
      -24688866426.657894,
      -218139976436.96747,
      -1940161379534.449,
  };
  const Vector flux_down_direct{
      14.796267664990843,
      5.704076430616008,
      0.00041353941227710225,
  };
  const Vector flux_up{
      -1582576078904.6782,
      -1776030106769.6392,
      -3498080815867.7104,
  };

  //flat_print(u, compute_u(dis, taus, phis, true) );
  //  const auto [flux_up_, flux_down_diffuse_, flux_down_direct_] =  compute_flux(dis, taus);
  //flat_print(flux_down_diffuse, flux_down_diffuse_);

  compare("test_11a-1layer",
          dis,
          taus,
          phis,
          u,
          u0,
          flux_down_diffuse,
          flux_down_direct,
          flux_up,
          true);
} catch (std::exception& e) {
  throw std::runtime_error(var_string("Error in test-11a-1layer:\n", e.what()));
}

void test_11a_multilayer() try {
  const Vector tau_arr{
      0.5, 1., 1.5, 2., 2.5, 3., 3.5, 4., 4.5, 5., 5.5, 6., 6.5, 7., 7.5, 8.};
  const Vector omega_arr(tau_arr.size(), 0.999999);
  const Index NQuad = 16;
  Matrix Leg_coeffs_all(tau_arr.size(), 32);
  for (auto&& v : Leg_coeffs_all)
    v = {1.00000000e+00, 7.50000000e-01, 5.62500000e-01, 4.21875000e-01,
         3.16406250e-01, 2.37304688e-01, 1.77978516e-01, 1.33483887e-01,
         1.00112915e-01, 7.50846863e-02, 5.63135147e-02, 4.22351360e-02,
         3.16763520e-02, 2.37572640e-02, 1.78179480e-02, 1.33634610e-02,
         1.00225958e-02, 7.51694682e-03, 5.63771011e-03, 4.22828259e-03,
         3.17121194e-03, 2.37840895e-03, 1.78380672e-03, 1.33785504e-03,
         1.00339128e-03, 7.52543458e-04, 5.64407594e-04, 4.23305695e-04,
         3.17479271e-04, 2.38109454e-04, 1.78582090e-04, 1.33936568e-04};

  const Numeric mu0 = 0.6;
  const Numeric I0 = Constant::pi / mu0;
  const Numeric phi0 = 0.9 * Constant::pi;
  const Matrix b_neg(1, 1, 1);
  const Matrix b_pos(1, 1, 1);
  const std::vector<disort::BDRF> BDRF_Fourier_modes{};
  Matrix s_poly_coeffs(tau_arr.size(), 2);
  for (auto&& v : s_poly_coeffs) v = {172311.79936609, -102511.4417051};
  const Vector f_arr{Leg_coeffs_all(joker, NQuad)};

  // Optional (unused)
  const Index NLeg = NQuad;
  const Index NFourier = NQuad;

  const disort::main_data dis(NQuad,
                              NLeg,
                              NFourier,
                              tau_arr,
                              omega_arr,
                              Leg_coeffs_all,
                              b_pos,
                              b_neg,
                              f_arr,
                              s_poly_coeffs,
                              BDRF_Fourier_modes,
                              mu0,
                              I0,
                              phi0);

  const Vector taus{
      0.06354625877794251,
      0.6354625877794251,
      6.354625877794252,
  };
  const Vector phis{
      0.0,
      1.5705463267948965,
      3.141092653589793,
      4.71163898038469,
      6.282185307179586,
  };
  const Tensor3 u{Vector{
      -209606883626.34714, -257142470250.6148,  -324686082983.9074,
      -400534528112.05164, -476369544127.0737,  -544320583885.5701,
      -596888613753.5187,  -628101959420.7332,  -174833453334.38254,
      -68269305272.55602,  -24911268185.163055, -10494974361.607708,
      -5299505097.504811,  -3210630128.394415,  -2300134340.9977927,
      -1922537131.235494,  -305944136094.113,   -341205251420.1154,
      -397464277090.05096, -465983639740.5981,  -537605405665.36487,
      -603223029047.7634,  -654454671515.3125,  -684947684803.4377,
      -288331804323.8822,  -250259026177.44397, -180152079724.66437,
      -110326211087.14871, -66264897160.20928,  -43026615656.16526,
      -31563122932.022694, -26532870807.283447, -879798186827.0431,
      -912179165488.4269,  -966874097360.9647,  -1036487348782.7402,
      -1102500450854.5408, -1150181090127.526,  -1178761920218.7922,
      -1192687414174.0774, -864206836625.0576,  -832302657217.9967,
      -779952516079.7228,  -714566376663.1827,  -645043069127.5748,
      -580837775348.4417,  -530746066181.60846, -501087806619.7405,
      -209606883626.08325, -257142470250.3339,  -324686082983.6397,
      -400534528111.832,   -476369544126.91364, -544320583885.4643,
      -596888613753.4564,  -628101959420.7068,  -174833453334.1488,
      -68269305272.45002,  -24911268185.11175,  -10494974361.574852,
      -5299505097.478594,  -3210630128.3711443, -2300134340.9784126,
      -1922537131.2242298, -305944136093.7966,  -341205251419.82355,
      -397464277089.80725, -465983639740.4154,  -537605405665.2392,
      -603223029047.6832,  -654454671515.2665,  -684947684803.4183,
      -288331804323.5564,  -250259026177.10797, -180152079724.35284,
      -110326211086.88681, -66264897159.98692,  -43026615655.97143,
      -31563122931.866264, -26532870807.194927, -879798186827.0287,
      -912179165488.4148,  -966874097360.956,   -1036487348782.7345,
      -1102500450854.5374, -1150181090127.524,  -1178761920218.7913,
      -1192687414174.0771, -864206836625.0419,  -832302657217.9779,
      -779952516079.6979,  -714566376663.1477,  -645043069127.5261,
      -580837775348.3826,  -530746066181.5523,  -501087806619.70825,
      -209606883625.2733,  -257142470249.62857, -324686082983.12415,
      -400534528111.5087,  -476369544126.7314,  -544320583885.36914,
      -596888613753.4109,  -628101959420.6909,  -174833453333.3432,
      -68269305271.98831,  -24911268184.75848,  -10494974361.165077,
      -5299505097.007703,  -3210630128.120541,  -2300134340.908355,
      -1922537131.2110178, -305944136093.0386,  -341205251419.2241,
      -397464277089.4055,  -465983639740.1773,  -537605405665.109,
      -603223029047.6156,  -654454671515.2345,  -684947684803.4071,
      -288331804322.7095,  -250259026176.0578,  -180152079722.9673,
      -110326211084.98721, -66264897157.67238,  -43026615654.59041,
      -31563122931.419624, -26532870807.100475, -879798186827.0189,
      -912179165488.4071,  -966874097360.9506,  -1036487348782.7312,
      -1102500450854.5354, -1150181090127.523,  -1178761920218.7908,
      -1192687414174.077,  -864206836625.031,   -832302657217.9647,
      -779952516079.6791,  -714566376663.1183,  -645043069127.4796,
      -580837775348.3228,  -530746066181.5029,  -501087806619.6869,
      -209606883626.26108, -257142470250.52,    -324686082983.8128,
      -400534528111.96875, -476369544127.0093,  -544320583885.5248,
      -596888613753.4901,  -628101959420.7203,  -174833453334.30786,
      -68269305272.52337,  -24911268185.14816,  -10494974361.599031,
      -5299505097.498222,  -3210630128.3884435, -2300134340.9920807,
      -1922537131.2311215, -305944136094.0049,  -341205251420.01263,
      -397464277089.961,   -465983639740.5267,  -537605405665.3127,
      -603223029047.7283,  -654454671515.2914,  -684947684803.4281,
      -288331804323.77277, -250259026177.33472, -180152079724.56778,
      -110326211087.07246, -66264897160.14711,  -43026615656.11027,
      -31563122931.97296,  -26532870807.24781,  -879798186827.0363,
      -912179165488.4211,  -966874097360.9607,  -1036487348782.7374,
      -1102500450854.5388, -1150181090127.525,  -1178761920218.7917,
      -1192687414174.0771, -864206836625.0502,  -832302657217.9879,
      -779952516079.7112,  -714566376663.167,   -645043069127.5532,
      -580837775348.416,   -530746066181.58356, -501087806619.7252,
      -209606883626.3472,  -257142470250.6148,  -324686082983.9074,
      -400534528112.0517,  -476369544127.07367, -544320583885.5702,
      -596888613753.5187,  -628101959420.7332,  -174833453334.3826,
      -68269305272.556046, -24911268185.16305,  -10494974361.607708,
      -5299505097.504809,  -3210630128.3944163, -2300134340.9977946,
      -1922537131.2354956, -305944136094.1129,  -341205251420.1155,
      -397464277090.05096, -465983639740.5982,  -537605405665.3649,
      -603223029047.7634,  -654454671515.3125,  -684947684803.4377,
      -288331804323.88226, -250259026177.444,   -180152079724.66443,
      -110326211087.14876, -66264897160.20932,  -43026615656.16529,
      -31563122932.022705, -26532870807.283463, -879798186827.0431,
      -912179165488.4269,  -966874097360.9647,  -1036487348782.7402,
      -1102500450854.5408, -1150181090127.526,  -1178761920218.7922,
      -1192687414174.0774, -864206836625.0576,  -832302657217.9967,
      -779952516079.7228,  -714566376663.1827,  -645043069127.5748,
      -580837775348.4415,  -530746066181.60846, -501087806619.7405,
  }
                      .reshape(5, 3, 16)};
  const Matrix u0{Vector{
      -209606883626.00388, -257142470250.28458, -324686082983.6261,
      -400534528111.8422,  -476369544126.9325,  -544320583885.4824,
      -596888613753.469,   -628101959420.713,   -174833453334.05887,
      -68269305272.38852,  -24911268185.054596, -10494974361.491821,
      -5299505097.379517,  -3210630128.3235474, -2300134340.97052,
      -1922537131.225586,  -305944136093.7479,  -341205251419.8008,
      -397464277089.8093,  -465983639740.4305,  -537605405665.2568,
      -603223029047.6979,  -654454671515.2761,  -684947684803.4229,
      -288331804323.4918,  -250259026177.0033,  -180152079724.16824,
      -110326211086.552,   -66264897159.54175,  -43026615655.73547,
      -31563122931.827637, -26532870807.207275, -879798186827.0317,
      -912179165488.4175,  -966874097360.958,   -1036487348782.7358,
      -1102500450854.538,  -1150181090127.5244, -1178761920218.7915,
      -1192687414174.0771, -864206836625.0452,  -832302657217.9818,
      -779952516079.7028,  -714566376663.154,   -645043069127.5336,
      -580837775348.391,   -530746066181.56195, -501087806619.7152,
  }
                      .reshape(3, 16)};
  const Vector flux_down_diffuse{
      -24688866426.658665,
      -218139976436.9681,
      -1940161379534.4463,
  };
  const Vector flux_down_direct{
      14.796267664990843,
      5.704076430616008,
      0.00041353941227710225,
  };
  const Vector flux_up{
      -1582576078904.6719,
      -1776030106769.6343,
      -3498080815867.707,
  };

  //flat_print(u, compute_u(dis, taus, phis, true) );
  //  const auto [flux_up_, flux_down_diffuse_, flux_down_direct_] =  compute_flux(dis, taus);
  //flat_print(flux_down_diffuse, flux_down_diffuse_);

  compare("test_11a-multilayer",
          dis,
          taus,
          phis,
          u,
          u0,
          flux_down_diffuse,
          flux_down_direct,
          flux_up,
          true);
} catch (std::exception& e) {
  throw std::runtime_error(
      var_string("Error in test-11a-multilayer:\n", e.what()));
}

int main() try {
  std::cout << std::setprecision(16);
  // test_11a_1layer();
  test_11a_multilayer();
} catch (std::exception& e) {
  std::cerr << "Error in main:\n" << e.what() << '\n';
  return EXIT_FAILURE;
}
