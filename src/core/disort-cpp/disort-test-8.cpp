#include <disort.h>

#include <algorithm>
#include <cstdlib>
#include <exception>
#include <functional>
#include <iomanip>
#include <iostream>
#include <stdexcept>

#include "artstime/artstime.h"
#include "debug.h"
#include "matpack_data.h"

bool is_good(const auto& a, const auto& b) {
  if (a.shape() != b.shape()) {
    std::cerr << "!!!\n\nBad shapes\n\n!!!\n";
    return false;
  }

  return std::transform_reduce(
      a.elem_begin(),
      a.elem_end(),
      b.elem_begin(),
      true,
      [](bool first, bool second) { return first and second; },
      [](Numeric first, Numeric second) {
        if (first == 0.0 or second == 0.0) return true;
        const Numeric ratio = std::abs(first / second - 1);
        return ratio < 1e-6;
      });
}

Tensor3 compute_u(const disort::main_data& dis,
                  const Vector& taus,
                  const Vector& phis,
                  const bool nt_corr) {
  Tensor3 u(phis.size(), taus.size(), dis.quads());
  disort::u_data u_data;
  disort::ims_data ims_data;
  disort::tms_data tms_data;

  for (Index j = 0; j < taus.size(); j++) {
    for (Index i = 0; i < phis.size(); i++) {
      if (nt_corr) {
        dis.u_corr(u_data, ims_data, tms_data, taus[j], phis[i]);
      } else {
        dis.u(u_data, taus[j], phis[i]);
      }
      u(i, j, joker) = u_data.intensities;
    }
  }
  return u;
}

Matrix compute_u0(const disort::main_data& dis, const Vector& taus) {
  Matrix u0(taus.size(), dis.quads());
  disort::u0_data u0_data;

  for (Index j = 0; j < taus.size(); j++) {
    dis.u0(u0_data, taus[j]);
    u0[j] = u0_data.u0;
  }
  return u0;
}

std::tuple<Vector, Vector, Vector> compute_flux(const disort::main_data& dis,
                                                const Vector& taus) {
  Vector flux_up(taus.size()), flux_down_diffuse(taus.size()),
      flux_down_direct(taus.size());
  disort::flux_data flux_data;

  for (Index j = 0; j < taus.size(); j++) {
    auto [ds, dr] = dis.flux_down(flux_data, taus[j]);
    flux_up[j] = dis.flux_up(flux_data, taus[j]);
    flux_down_diffuse[j] = ds;
    flux_down_direct[j] = dr;
  }
  return {flux_up, flux_down_diffuse, flux_down_direct};
}

void compare(const std::string_view name,
             const disort::main_data& dis,
             const Vector& taus,
             const Vector& phis,
             const Tensor3& u,
             const Matrix& u0,
             const Vector& flux_down_diffuse,
             const Vector& flux_down_direct,
             const Vector& flux_up,
             const bool nt_corr) {
  const auto u_arts = compute_u(dis, taus, phis, nt_corr);
  const auto u0_arts = compute_u0(dis, taus);
  const auto [flux_up_arts, flux_down_diffuse_arts, flux_down_direct_arts] =
      compute_flux(dis, taus);

  ARTS_USER_ERROR_IF(not is_good(u_arts, u), "Failed u in test ", name);
  ARTS_USER_ERROR_IF(not is_good(u0_arts, u0), "Failed u0 in test ", name);
  ARTS_USER_ERROR_IF(
      not is_good(flux_up_arts, flux_up), "Failed flux_up in test ", name);
  ARTS_USER_ERROR_IF(not is_good(flux_down_diffuse_arts, flux_down_diffuse),
                     "Failed flux_down_diffuse in test ",
                     name);
  ARTS_USER_ERROR_IF(not is_good(flux_down_direct_arts, flux_down_direct),
                     "Failed flux_down_direct in test ",
                     name);
};

void flat_print(const auto& a, const auto& b) {
  ARTS_USER_ERROR_IF(a.shape() != b.shape(), "Failed shape comparison");
  const auto av = a.flat_view();
  const auto bv = b.flat_view();

  for (Index i = 0; i < a.size(); i++) {
    std::cout << i << ' ' << av[i] << ' ' << bv[i] << ' ' << (bv[i] / av[i] - 1)
              << '\n';
  }
}

void test_8a() try {
  const Vector tau_arr{0.25, 0.5};
  const Vector omega_arr{0.5, 0.3};
  const Index NQuad = 8;
  Matrix Leg_coeffs_all(2, 9, 0);
  Leg_coeffs_all(joker, 0) = 1;

  const Numeric mu0 = 0;
  const Numeric I0 = 0;
  const Numeric phi0 = 0;
  const Matrix b_neg(1, 1, Constant::inv_pi);

  // Optional (unused)
  const Index NLeg = NQuad;
  const Index NFourier = NQuad;
  const Matrix b_pos(1, 1, 0);
  const Vector f_arr{};
  const std::vector<disort::BDRF> BDRF_Fourier_modes{};
  const Matrix s_poly_coeffs(0, 0);

  const disort::main_data dis(NQuad,
                              NLeg,
                              NFourier,
                              tau_arr,
                              omega_arr,
                              Leg_coeffs_all,
                              b_pos,
                              b_neg,
                              f_arr,
                              s_poly_coeffs,
                              BDRF_Fourier_modes,
                              mu0,
                              I0,
                              phi0);

  const Vector taus{
      0.003971641173621407,
      0.03971641173621407,
      0.39716411736214075,
  };
  const Vector phis{
      0.0,
      1.5705463267948965,
      3.141092653589793,
      4.71163898038469,
      6.282185307179586,
  };
  const Tensor3 u{Vector{
      0.07504587177624975,  0.04295819256494675,   0.0264430699456903,
      0.02034686753367425,  0.3055593520193062,    0.31556638920773383,
      0.3169544303704357,   0.31733317602621697,   0.06866415777877224,
      0.03823486546775255,  0.02327748908349911,   0.017846481163163695,
      0.21633480979293468,  0.29180518258671967,   0.3048588373266642,
      0.3085459092782649,   0.016888063919111688,  0.0057451124254706415,
      0.003045238562956103, 0.0022374738936412693, 0.030700082761062952,
      0.12745044589678015,  0.19791883922661793,   0.22513034375841778,
      0.07504587177624975,  0.04295819256494675,   0.0264430699456903,
      0.02034686753367425,  0.3055593520193062,    0.31556638920773383,
      0.3169544303704357,   0.31733317602621697,   0.06866415777877224,
      0.03823486546775255,  0.02327748908349911,   0.017846481163163695,
      0.21633480979293468,  0.29180518258671967,   0.3048588373266642,
      0.3085459092782649,   0.016888063919111688,  0.0057451124254706415,
      0.003045238562956103, 0.0022374738936412693, 0.030700082761062952,
      0.12745044589678015,  0.19791883922661793,   0.22513034375841778,
      0.07504587177624975,  0.04295819256494675,   0.0264430699456903,
      0.02034686753367425,  0.3055593520193062,    0.31556638920773383,
      0.3169544303704357,   0.31733317602621697,   0.06866415777877224,
      0.03823486546775255,  0.02327748908349911,   0.017846481163163695,
      0.21633480979293468,  0.29180518258671967,   0.3048588373266642,
      0.3085459092782649,   0.016888063919111688,  0.0057451124254706415,
      0.003045238562956103, 0.0022374738936412693, 0.030700082761062952,
      0.12745044589678015,  0.19791883922661793,   0.22513034375841778,
      0.07504587177624975,  0.04295819256494675,   0.0264430699456903,
      0.02034686753367425,  0.3055593520193062,    0.31556638920773383,
      0.3169544303704357,   0.31733317602621697,   0.06866415777877224,
      0.03823486546775255,  0.02327748908349911,   0.017846481163163695,
      0.21633480979293468,  0.29180518258671967,   0.3048588373266642,
      0.3085459092782649,   0.016888063919111688,  0.0057451124254706415,
      0.003045238562956103, 0.0022374738936412693, 0.030700082761062952,
      0.12745044589678015,  0.19791883922661793,   0.22513034375841778,
      0.07504587177624975,  0.04295819256494675,   0.0264430699456903,
      0.02034686753367425,  0.3055593520193062,    0.31556638920773383,
      0.3169544303704357,   0.31733317602621697,   0.06866415777877224,
      0.03823486546775255,  0.02327748908349911,   0.017846481163163695,
      0.21633480979293468,  0.29180518258671967,   0.3048588373266642,
      0.3085459092782649,   0.016888063919111688,  0.0057451124254706415,
      0.003045238562956103, 0.0022374738936412693, 0.030700082761062952,
      0.12745044589678015,  0.19791883922661793,   0.22513034375841778,
  }
                      .reshape(5, 3, 8)};
  const Matrix u0{Vector{
      0.07504587177624975,  0.04295819256494675,   0.0264430699456903,
      0.02034686753367425,  0.3055593520193062,    0.31556638920773383,
      0.3169544303704357,   0.31733317602621697,   0.06866415777877224,
      0.03823486546775255,  0.02327748908349911,   0.017846481163163695,
      0.21633480979293468,  0.29180518258671967,   0.3048588373266642,
      0.3085459092782649,   0.016888063919111688,  0.0057451124254706415,
      0.003045238562956103, 0.0022374738936412693, 0.030700082761062952,
      0.12745044589678015,  0.19791883922661793,   0.22513034375841778,
  }
                      .reshape(3, 8)};
  const Vector flux_down_diffuse{
      0.9943237795064224,
      0.9459491667773765,
      0.5891201977947456,
  };
  const Vector flux_down_direct{0, 0, 0};
  const Vector flux_up{
      0.09172779766547547,
      0.08116205207598315,
      0.011621218113382903,
  };

  //flat_print(u, compute_u(dis, taus, phis, false) );
  //  const auto [flux_up_, flux_down_diffuse_, flux_down_direct_] =  compute_flux(dis, taus);
  //  flat_print(flux_down_diffuse, flux_down_diffuse_);

  compare("test_8a",
          dis,
          taus,
          phis,
          u,
          u0,
          flux_down_diffuse,
          flux_down_direct,
          flux_up,
          false);
} catch (std::exception& e) {
  throw std::runtime_error(var_string("Error in test-8a:\n", e.what()));
}

void test_8b() try {
  const Vector tau_arr{0.25, 0.5};
  const Vector omega_arr{0.8, 0.95};
  const Index NQuad = 8;
  Matrix Leg_coeffs_all(2, 9, 0);
  Leg_coeffs_all(joker, 0) = 1;

  const Numeric mu0 = 0;
  const Numeric I0 = 0;
  const Numeric phi0 = 0;
  const Matrix b_neg(1, 1, Constant::inv_pi);

  // Optional (unused)
  const Index NLeg = NQuad;
  const Index NFourier = NQuad;
  const Matrix b_pos(1, 1, 0);
  const Vector f_arr{};
  const std::vector<disort::BDRF> BDRF_Fourier_modes{};
  const Matrix s_poly_coeffs(0, 0);

  const disort::main_data dis(NQuad,
                              NLeg,
                              NFourier,
                              tau_arr,
                              omega_arr,
                              Leg_coeffs_all,
                              b_pos,
                              b_neg,
                              f_arr,
                              s_poly_coeffs,
                              BDRF_Fourier_modes,
                              mu0,
                              I0,
                              phi0);

  const Vector taus{
      0.003971641173621407,
      0.03971641173621407,
      0.39716411736214075,
  };
  const Vector phis{
      0.0,
      1.5705463267948965,
      3.141092653589793,
      4.71163898038469,
      6.282185307179586,
  };
  const Tensor3 u{Vector{
      0.14580829040792687,  0.10120278391639419,  0.06628130819552895,
      0.051958636121393946, 0.3096499582910394,   0.31644657899546624,
      0.3173892998209517,   0.31764653324234704,  0.13823220326835955,
      0.09485231564705324,  0.06132811901332352,  0.04785881627843901,
      0.24789778957388708,  0.3000304502529376,   0.30903463109258905,
      0.3115773704225469,   0.07777841139924935,  0.02638803129468744,
      0.01398140797590737,  0.010271603695137667, 0.11925568689618357,
      0.1840182949208884,   0.2333095829684088,   0.2524629253932135,
      0.14580829040792687,  0.10120278391639419,  0.06628130819552895,
      0.051958636121393946, 0.3096499582910394,   0.31644657899546624,
      0.3173892998209517,   0.31764653324234704,  0.13823220326835955,
      0.09485231564705324,  0.06132811901332352,  0.04785881627843901,
      0.24789778957388708,  0.3000304502529376,   0.30903463109258905,
      0.3115773704225469,   0.07777841139924935,  0.02638803129468744,
      0.01398140797590737,  0.010271603695137667, 0.11925568689618357,
      0.1840182949208884,   0.2333095829684088,   0.2524629253932135,
      0.14580829040792687,  0.10120278391639419,  0.06628130819552895,
      0.051958636121393946, 0.3096499582910394,   0.31644657899546624,
      0.3173892998209517,   0.31764653324234704,  0.13823220326835955,
      0.09485231564705324,  0.06132811901332352,  0.04785881627843901,
      0.24789778957388708,  0.3000304502529376,   0.30903463109258905,
      0.3115773704225469,   0.07777841139924935,  0.02638803129468744,
      0.01398140797590737,  0.010271603695137667, 0.11925568689618357,
      0.1840182949208884,   0.2333095829684088,   0.2524629253932135,
      0.14580829040792687,  0.10120278391639419,  0.06628130819552895,
      0.051958636121393946, 0.3096499582910394,   0.31644657899546624,
      0.3173892998209517,   0.31764653324234704,  0.13823220326835955,
      0.09485231564705324,  0.06132811901332352,  0.04785881627843901,
      0.24789778957388708,  0.3000304502529376,   0.30903463109258905,
      0.3115773704225469,   0.07777841139924935,  0.02638803129468744,
      0.01398140797590737,  0.010271603695137667, 0.11925568689618357,
      0.1840182949208884,   0.2333095829684088,   0.2524629253932135,
      0.14580829040792687,  0.10120278391639419,  0.06628130819552895,
      0.051958636121393946, 0.3096499582910394,   0.31644657899546624,
      0.3173892998209517,   0.31764653324234704,  0.13823220326835955,
      0.09485231564705324,  0.06132811901332352,  0.04785881627843901,
      0.24789778957388708,  0.3000304502529376,   0.30903463109258905,
      0.3115773704225469,   0.07777841139924935,  0.02638803129468744,
      0.01398140797590737,  0.010271603695137667, 0.11925568689618357,
      0.1840182949208884,   0.2333095829684088,   0.2524629253932135,
  }
                      .reshape(5, 3, 8)};
  const Matrix u0{Vector{
      0.14580829040792687,  0.10120278391639419,  0.06628130819552895,
      0.051958636121393946, 0.3096499582910394,   0.31644657899546624,
      0.3173892998209517,   0.31764653324234704,  0.13823220326835955,
      0.09485231564705324,  0.06132811901332352,  0.04785881627843901,
      0.24789778957388708,  0.3000304502529376,   0.30903463109258905,
      0.3115773704225469,   0.07777841139924935,  0.02638803129468744,
      0.01398140797590737,  0.010271603695137667, 0.11925568689618357,
      0.1840182949208884,   0.2333095829684088,   0.2524629253932135,
  }
                      .reshape(3, 8)};
  const Vector flux_down_diffuse{
      0.9961448631466883,
      0.9627200407014125,
      0.7104609316453792,
  };
  const Vector flux_down_direct{
      0,
      0,
      0,
  };
  const Vector flux_up{
      0.22330869914476675,
      0.2074718860486591,
      0.05338022324441058,
  };

  //flat_print(u, compute_u(dis, taus, phis, false) );
  // const auto [flux_up_, flux_down_diffuse_, flux_down_direct_] =  compute_flux(dis, taus);
  // flat_print(flux_down_direct, flux_down_direct);

  compare("test_8b",
          dis,
          taus,
          phis,
          u,
          u0,
          flux_down_diffuse,
          flux_down_direct,
          flux_up,
          false);
} catch (std::exception& e) {
  throw std::runtime_error(var_string("Error in test-8b:\n", e.what()));
}

void test_8c() try {
  const Vector tau_arr{1, 3};
  const Vector omega_arr{0.8, 0.95};
  const Index NQuad = 8;
  Matrix Leg_coeffs_all(2, 9, 0);
  Leg_coeffs_all(joker, 0) = 1;

  const Numeric mu0 = 0;
  const Numeric I0 = 0;
  const Numeric phi0 = 0;
  const Matrix b_neg(1, 1, Constant::inv_pi);

  // Optional (unused)
  const Index NLeg = NQuad;
  const Index NFourier = NQuad;
  const Matrix b_pos(1, 1, 0);
  const Vector f_arr{};
  const std::vector<disort::BDRF> BDRF_Fourier_modes{};
  const Matrix s_poly_coeffs(0, 0);

  const disort::main_data dis(NQuad,
                              NLeg,
                              NFourier,
                              tau_arr,
                              omega_arr,
                              Leg_coeffs_all,
                              b_pos,
                              b_neg,
                              f_arr,
                              s_poly_coeffs,
                              BDRF_Fourier_modes,
                              mu0,
                              I0,
                              phi0);

  const Vector taus{
      0.02382984704172844,
      0.2382984704172844,
      2.3829847041728445,
  };
  const Vector phis{
      0.0,
      1.5705463267948965,
      3.141092653589793,
      4.71163898038469,
      6.282185307179586,
  };
  const Tensor3 u{Vector{
      0.161175538258408,   0.13539500642992666,  0.11678995495260304,
      0.10570526657967276, 0.27712737738883514,  0.30844404039044193,
      0.31336199722352664, 0.314729940156827,    0.13301775587582398,
      0.11590283378673186, 0.10207607296344559,  0.09278720299299116,
      0.15370910570629537, 0.2342373373182362,   0.2697205509477058,
      0.28170440477273667, 0.04374547781726473,  0.03202918259519374,
      0.02171598241023691, 0.017237479973646448, 0.04920985219034371,
      0.05983525455647728, 0.07739104278303632,  0.09423012481573542,
      0.161175538258408,   0.13539500642992666,  0.11678995495260304,
      0.10570526657967276, 0.27712737738883514,  0.30844404039044193,
      0.31336199722352664, 0.314729940156827,    0.13301775587582398,
      0.11590283378673186, 0.10207607296344559,  0.09278720299299116,
      0.15370910570629537, 0.2342373373182362,   0.2697205509477058,
      0.28170440477273667, 0.04374547781726473,  0.03202918259519374,
      0.02171598241023691, 0.017237479973646448, 0.04920985219034371,
      0.05983525455647728, 0.07739104278303632,  0.09423012481573542,
      0.161175538258408,   0.13539500642992666,  0.11678995495260304,
      0.10570526657967276, 0.27712737738883514,  0.30844404039044193,
      0.31336199722352664, 0.314729940156827,    0.13301775587582398,
      0.11590283378673186, 0.10207607296344559,  0.09278720299299116,
      0.15370910570629537, 0.2342373373182362,   0.2697205509477058,
      0.28170440477273667, 0.04374547781726473,  0.03202918259519374,
      0.02171598241023691, 0.017237479973646448, 0.04920985219034371,
      0.05983525455647728, 0.07739104278303632,  0.09423012481573542,
      0.161175538258408,   0.13539500642992666,  0.11678995495260304,
      0.10570526657967276, 0.27712737738883514,  0.30844404039044193,
      0.31336199722352664, 0.314729940156827,    0.13301775587582398,
      0.11590283378673186, 0.10207607296344559,  0.09278720299299116,
      0.15370910570629537, 0.2342373373182362,   0.2697205509477058,
      0.28170440477273667, 0.04374547781726473,  0.03202918259519374,
      0.02171598241023691, 0.017237479973646448, 0.04920985219034371,
      0.05983525455647728, 0.07739104278303632,  0.09423012481573542,
      0.161175538258408,   0.13539500642992666,  0.11678995495260304,
      0.10570526657967276, 0.27712737738883514,  0.30844404039044193,
      0.31336199722352664, 0.314729940156827,    0.13301775587582398,
      0.11590283378673186, 0.10207607296344559,  0.09278720299299116,
      0.15370910570629537, 0.2342373373182362,   0.2697205509477058,
      0.28170440477273667, 0.04374547781726473,  0.03202918259519374,
      0.02171598241023691, 0.017237479973646448, 0.04920985219034371,
      0.05983525455647728, 0.07739104278303632,  0.09423012481573542,
  }
                      .reshape(5, 3, 8)};
  const Matrix u0{Vector{
      0.161175538258408,   0.13539500642992666,  0.11678995495260304,
      0.10570526657967276, 0.27712737738883514,  0.30844404039044193,
      0.31336199722352664, 0.314729940156827,    0.13301775587582398,
      0.11590283378673186, 0.10207607296344559,  0.09278720299299116,
      0.15370910570629537, 0.2342373373182362,   0.2697205509477058,
      0.28170440477273667, 0.04374547781726473,  0.03202918259519374,
      0.02171598241023691, 0.017237479973646448, 0.04920985219034371,
      0.05983525455647728, 0.07739104278303632,  0.09423012481573542,
  }
                      .reshape(3, 8)};
  const Vector flux_down_diffuse{
      0.9797724105539491,
      0.8267457224245764,
      0.24624748028288818,
  };
  const Vector flux_down_direct{
      0,
      0,
      0,
  };
  const Vector flux_up{
      0.3715809526921473,
      0.32293142355318305,
      0.07231282189738622,
  };

  //flat_print(u, compute_u(dis, taus, phis, false) );
  // const auto [flux_up_, flux_down_diffuse_, flux_down_direct_] =  compute_flux(dis, taus);
  // flat_print(flux_down_direct, flux_down_direct);

  compare("test_8c",
          dis,
          taus,
          phis,
          u,
          u0,
          flux_down_diffuse,
          flux_down_direct,
          flux_up,
          false);
} catch (std::exception& e) {
  throw std::runtime_error(var_string("Error in test-8c:\n", e.what()));
}

int main() try {
  std::cout << std::setprecision(16);
  test_8a();
  test_8b();
  test_8c();
} catch (std::exception& e) {
  std::cerr << "Error in main:\n" << e.what() << '\n';
  return EXIT_FAILURE;
}
