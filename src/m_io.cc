/* Input / Output method functions. */

#include "arts.h"
#include "messages.h"
#include "file.h"
#include "md.h"


/** A helper function that writes a matrix to an already opened file. 

    @param os   Output. The stream to write to.
    @param m    The matrix to write

    @author Stefan Buehler */
void write_matrix_to_stream(ostream& os,
			    const MATRIX& m)
{
  extern const string full_name;

  os << "# Generated by "
     << full_name << ", "
     << __DATE__ << ", "
     << __TIME__ << "\n";

  // Number of elements:
  os << m.num_rows() << ' ' << m.num_cols() << '\n';

  // Determine the precision, depending on whether Numeric is double
  // or float:  
  int precision;
  switch (sizeof(Numeric)) {
  case sizeof(float)  : precision = FLT_DIG; break;
  case sizeof(double) : precision = DBL_DIG; break;
  default: out0 << "Numeric must be double or float\n"; exit(1);
  }

  os << setprecision(precision);
  // Write the elements:
  for (size_t r=0; r<m.num_rows(); ++r)
    {
      os << m[r][0];
      
      for (size_t c=1; c<m.num_cols(); ++c)
	{
	  os << " " << m[r][c];
	}

      os << '\n';
    }
}

void VectorWriteToFile(// WS Input:
                       const VECTOR&,
                       // WS Variable Names:
                       const WsvActualGenericNames& ws_var_names)
{
  // FIXME: Add code here
}

void MatrixWriteToFile(// WS Input:
                       const MATRIX&,
                       // WS Variable Names:
                       const WsvActualGenericNames& ws_var_names)
{
  // FIXME: Add code here
}

void VectorWriteToNamedFile(// WS Output:
			    const VECTOR& v,
			    // WS Variable Names:
			    const WsvActualGenericNames& ws_var_names,
			    // Control Parameters:
			    const string& filename)
{
  extern const string full_name;
  ofstream of;

  open_output_file(of, filename);
  of << "# Generated by "
     << full_name << ", "
     << __DATE__ << ", "
     << __TIME__ << "\n";

  // Work space variable name:
  of << "\"" << ws_var_names.input[0] << "\"\n";

  // Number of elements:
  of << v.size() << " 0\n";

  // Determine the precision, depending on whether Numeric is double
  // or float:  
  int precision;
  switch (sizeof(Numeric)) {
  case sizeof(float)  : precision = FLT_DIG; break;
  case sizeof(double) : precision = DBL_DIG; break;
  default: out0 << "Numeric must be double or float\n"; exit(1);
  }

  of << setprecision(precision);
  // Write the elements:
  for ( VECTOR::const_iterator i=v.begin(); i!=v.end(); ++i )
    {
	of << *i << '\n';
    }
}

void MatrixWriteToNamedFile(// WS Input:
			    const MATRIX& m,
			    // WS Variable Names:
			    const WsvActualGenericNames& ws_var_names,
			    // Control Parameters:
			    const string& filename)
{
  ofstream of;
  open_output_file(of, filename);

  // Write the matrix to the file.
  write_matrix_to_stream(of,m);
}
