/* Input / Output method functions. */

#include "arts.h"
#include "messages.h"
#include "file.h"
#include "vecmat.h"
#include "math_funcs.h"
#include "md.h"


/** A helper function that writes a matrix to a stream.

    @param os   Output. The stream to write to.
    @param m    The matrix to write.

    @author Stefan Buehler */
void write_matrix_to_stream(ostream& os,
			    const MATRIX& m)
{
  extern const string full_name;

  os << "# Generated by "
     << full_name << ", "
     << __DATE__ << ", "
     << __TIME__ << "\n";

  // Number of elements:
  os << m.num_rows() << ' ' << m.num_cols() << '\n';

  // Determine the precision, depending on whether Numeric is double
  // or float:  
  int precision;
  switch (sizeof(Numeric)) {
  case sizeof(float)  : precision = FLT_DIG; break;
  case sizeof(double) : precision = DBL_DIG; break;
  default: out0 << "Numeric must be double or float\n"; exit(1);
  }

  os << setprecision(precision);
  // Write the elements:
  for (size_t r=0; r<m.num_rows(); ++r)
    {
      os << m[r][0];
      
      for (size_t c=1; c<m.num_cols(); ++c)
	{
	  os << " " << m[r][c];
	}

      os << '\n';
    }
}

/** A helper function that writes a matrix to a file. Uses
    write_matrix_to_stream. 

    @param filename    The name of the file.
    @param m           The matrix to write.

    @author Stefan Buehler */
void write_matrix_to_file(const string& filename,
			  const MATRIX& m)
{
  ofstream of;

  out2 << "  Writing file: " << filename << '\n';
  open_output_file(of, filename);

  // Write the matrix to the stream.
  write_matrix_to_stream(of,m);
}


/** A helper function that reads a matrix from a stream.

    @param m    Output. The matrix to read.
    @param is   Output. The input stream.

    @author Stefan Buehler */
void read_matrix_from_stream(MATRIX& m,
			     istream& is)
{
  // First, skip all the lines that have a # at the beginning. (Maybe
  // preceded by whitespace.)
  bool comments=true;
  char c;
  string linebuffer;
  while (comments)
    {
      is >> ws;
      is.get(c);
      if ('#'==c)
	{
	  getline(is,linebuffer);
	  //	  cout << "C: " << linebuffer << endl;
	}
      else
	{
	  is.unget();
	  comments = false;
	}
    }

  // Read the Matrix. The TNT package expects exactly this input
  // format, first two numbers indicating the dimensions, then the
  // elements. 
  is >> m;

  if ( is.fail() || is.bad() )
    throw runtime_error("Stream gave fail or bad.");

  is >> ws;

  if ( !is.eof() )
    throw runtime_error("Input finished, but end of stream not reached.");
}


/** A helper function that reads a matrix from a file. Uses read_matrix_from_stream.

    @param m         Output. The matrix to read.
    @param filename  The name of the file to read.

    @author Stefan Buehler */
void read_matrix_from_file(MATRIX& m,
			   const string& filename)
{
  ifstream ifs;

  // Open input stream:
  open_input_file(ifs, filename);
  // No need to check for error, because open_input_file throws a
  // runtime_error with an appropriate error message.

  // Read the matrix from the stream. Here we catch the exception,
  // because then we can issue a nicer error message that includes the 
  // filename.
  try
    {
      read_matrix_from_stream(m,ifs);
    }
  catch (runtime_error x)
    {
      std::ostrstream os;
      os << "Error reading file: " << filename << '\n'
	 << x.what();
      throw runtime_error(os.str());
    }
}



//
//------------------------------< Write Methods >------------------------------
//


void VectorWriteToFile(// WS Generic Input:
                       const VECTOR& v,
                       // WS Generic Input Names:
                       const string& v_name)
{
  const extern string basename;                       
  string filename = basename+"."+v_name+".a";

  // Convert the vector to a matrix:
  MATRIX m;
  to_matrix(m,v);

  // Write the matrix to the file.
  write_matrix_to_file(filename,m);
}

void MatrixWriteToFile(// WS Generic Input:
                       const MATRIX& m,
                       // WS Generic Input Names:
                       const string& m_name)
{
  const extern string basename;                       
  string filename = basename+"."+m_name+".a";

  // Write the matrix to the file.
  write_matrix_to_file(filename,m);
}

void VectorWriteToNamedFile(// WS Output:
			    const VECTOR& v,
			    // WS Variable Names:
			    const string& v_name,
			    // Control Parameters:
			    const string& filename)
{

  // Convert the vector to a matrix:
  MATRIX m;
  to_matrix(m,v);

  // Write the matrix to the file.
  write_matrix_to_file(filename,m);
}

void MatrixWriteToNamedFile(// WS Generic Input:
                            const MATRIX& m,
                            // WS Generic Input Names:
                            const string& m_name,
                            // Control Parameters:
                            const string& filename)
{

  // Write the matrix to the file.
  write_matrix_to_file(filename,m);
}




//
//------------------------------< Read Methods >------------------------------
//



void VectorReadFromFile(// WS Generic Output:
                        VECTOR& v,
                        // WS Generic Output Names:
                        const string& v_name)
{
  const extern string basename;                       
  string filename = basename+"."+v_name+".a";

  // Read a matrix from the file:
  MATRIX m;
  read_matrix_from_file(m,filename);


  // Convert the matrix to a vector:
  to_vector(v,m);
}


void MatrixReadFromFile(// WS Generic Output:
                        MATRIX& m,
                        // WS Generic Output Names:
                        const string& m_name)
{
  const extern string basename;                       
  string filename = basename+"."+m_name+".a";

  // Read the matrix from the file:
  read_matrix_from_file(m,filename);
}


