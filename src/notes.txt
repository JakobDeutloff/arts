
1. Method conventions:

INPUT abs
OUTPUT abs

Means: Abs *must* exist before (already enforced).


INPUT 
OUTPUT abs

Means: Abs may or may not exist before. It is the responsibility of
the programmer to specify (and document!) how the method deals with
previous content of abs. This must be explained in the online
documentation for the method.


2. Convention for Generic methods: The same argument may occur both as
an input and an output argument. Example

VectorAdd(p_abs,p_abs)

will flip the order of the elements of p_abs.


3. There will be a few `generic' WSVs of each group. Convention:

index1, index2, matrix1, matrix2, etc..

4. Setting up method lists:

   MethodListDefine (already implemented)
   ArrayOfMethodListDefine (needed for example for the absorption
   			    methods, where we want to be able to
                            specify the lineshape 
   			    separately for each tg).

5. Outline of new absorption structure:

WSVs: tgs, lines, lines_per_tg
Methods: Stays as it is:

WSV: lineshape was in the past a complicated variable containing identification
     of the lineshape to use. In future:

     ArrayOfIndex lineshape_methods: The lineshape methods to use for
                                     each tg.

WSVs for lineshapes: 
     Vector lineshape: The output
     Numeric f0:       Center frequency
     f_mono:           frequency grid 
     Numeric gamma:    Pressure broadening parameter
     Numeric sigma:    Dopler broadening parameter

Methods: Each lineshape function will be a method:

Name				 Output	       Input

lineshapeDoppler		 lineshape     f0, f_mono, gamma
lineshapeLorentz		 lineshape     f0, f_mono, gamma
lineshapeVoigtKuntz3		 lineshape     f0, f_mono, gamma, sigma
lineshapeVoigtKuntz4		 lineshape     f0, f_mono, gamma, sigma
lineshapeVoigtKuntz6		 lineshape     f0, f_mono, gamma, sigma
lineshapeVoigtDrayson		 lineshape     f0, f_mono, gamma, sigma
lineshapeRosenkranzVoigtDrayson	 lineshape     f0, f_mono, gamma, sigma
lineshapeRosenkranzVoigtKuntz6	 lineshape     f0, f_mono, gamma, sigma
                       

Furthermore, there are methods for the normalization:

lineshapeNormQuadratic           lineshape	lineshape, f0, f_mono

This one multiplies the lineshape with a (f/f0)^2 term. In this case,
lineshape is both input and output, as it must exist before.

For ease of use, lets have specific methods to set up the method
lists:

# For all tgs the same lineshapes:
lineshape_methodsDefine{["lineshapeVoigtDrayson","lineshapeNormQuadratic"]}

# Or individually:
tgsDefine{["O3","H2O","ClO"]}
lineshape_methodsDefinePerTg{
  name = "O3"
  methods = ["lineshapeVoigtDrayson","lineshapeNormQuadratic"]
}
lineshape_methodsDefinePerTg{
  name = "ClO"
  methods = ["lineshapeVoigtDrayson","lineshapeNormQuadratic"]
}

Note that we did not define the methods for the tg H2O, which is ok as
long as we use one of the complete absorption models for this tg.

