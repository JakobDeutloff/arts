# An example ARTS controlfile that calculates absorption
# coefficients. 
# SAB 16.06.2000

# --------------------< A specific method >--------------------
#                      -------------------
# Read the spectroscopic line data from the HITRAN catalogue and
# create the workspace variable `lines':
linesReadFromHitran {
   filename = "../../data/spectroscopy/hitran96/hitran96_lowfreq.par"
   fmin     = 183e9
   fmax     = 184e9
}

# Optionally write the line list to a file:
linesWriteToFile{""} 

 
# This defines the list of tag groups (`tag_groups'). Absorption
# coefficients will be calculated separately for each tag group. This
# is necessary in order to calculate weighting functions later on.
# The lines are assigned to the tag groups in the order as the groups
# are specified here. That means the last group H2O gets assigned all
# the H2O lines that do not fit in any other group.
tag_groupsDefine{
      [ "H2O-161",
        "H2O-181",
        "H2O-171",
        "H2O"] 
}

# This separates the lines into the different tag groups and creates
# the workspace variable `lines_per_tg':
lines_per_tgCreateFromLines{}

#lines_per_tgWriteToFile{""} 


# --------------------< A generic method >--------------------
#                      ------------------
# Read the pressure, temperature, and altitude profiles and create 
# the workspace variable `raw_ptz_1d':
MatrixReadFromFile (raw_ptz_1d) 
        {"../../data/atmosphere/fascod/midlatitude-summer.tz.am"}

# The same for the input VMR profiles:
raw_vmrs_1dReadFromScenario
        {"../../data/atmosphere/fascod/midlatitude-summer"}

# Optionally write this to a file:
#ArrayOfMatrixWriteToFile (raw_vmrs_1d) {""}


# Create the pressure grid `p_abs':
VectorNLogSpace(p_abs){
        start = 100000
        stop  = 10
        n     = 140
}

VectorWriteToFile(p_abs){""}


# Now interpolate all the raw atmospheric input onto the pressure 
# grid and create the atmospheric variables `t_abs', `z_abs', `vmrs'
AtmFromRaw1D{}

# Optionally write these to files:
#VectorWriteToFile (t_abs) {""}
#VectorWriteToFile (z_abs) {""}
#ArrayOfVectorWriteToFile (vmrs)  {""}


# Create the frequency grid `f_mono':
VectorNLinSpace(f_mono){
        start = 180e9
        stop  = 185e9
        n     = 200    
}

# Write frequency grid to file:
VectorWriteToFile (f_mono) {""}

# Calculate absorption coefficients, both total (`abs') and 
# separately for each tag group (`abs_per_tg'):
absCalc{}

# These we definitely want to write to files!
MatrixWriteToFile (abs) {""}
ArrayOfMatrixWriteToFile (abs_per_tg) {""}
